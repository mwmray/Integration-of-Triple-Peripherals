
Potentiometer by ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003de4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003ef0  08003ef0  00004ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f80  08003f80  0000507c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f80  08003f80  0000507c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f80  08003f80  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f80  08003f80  00004f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f84  08003f84  00004f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08003f88  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000007c  08004004  0000507c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08004004  00005288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009977  00000000  00000000  000050a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c46  00000000  00000000  0000ea1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00010668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a8  00000000  00000000  000111b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018427  00000000  00000000  00011a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e784  00000000  00000000  00029e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cf2f  00000000  00000000  0003860b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c553a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d0  00000000  00000000  000c5580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c8950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ed8 	.word	0x08003ed8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08003ed8 	.word	0x08003ed8

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000516:	f000 fdb3 	bl	8001080 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800051a:	f000 f897 	bl	800064c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800051e:	f000 f9a5 	bl	800086c <MX_GPIO_Init>
	MX_ADC1_Init();
 8000522:	f000 f8ef 	bl	8000704 <MX_ADC1_Init>
	MX_TIM3_Init();
 8000526:	f000 f92b 	bl	8000780 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b3c      	ldr	r3, [pc, #240]	@ (800061c <main+0x10c>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a3b      	ldr	r2, [pc, #236]	@ (800061c <main+0x10c>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b39      	ldr	r3, [pc, #228]	@ (800061c <main+0x10c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]
	Alcd_Init(&lcd, 2, 16);
 8000542:	2210      	movs	r2, #16
 8000544:	2102      	movs	r1, #2
 8000546:	4836      	ldr	r0, [pc, #216]	@ (8000620 <main+0x110>)
 8000548:	f000 fc72 	bl	8000e30 <Alcd_Init>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800054c:	2100      	movs	r1, #0
 800054e:	4835      	ldr	r0, [pc, #212]	@ (8000624 <main+0x114>)
 8000550:	f002 fad8 	bl	8002b04 <HAL_TIM_PWM_Start>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//Potentiometer
		HAL_ADC_Start(&hadc1);
 8000554:	4834      	ldr	r0, [pc, #208]	@ (8000628 <main+0x118>)
 8000556:	f000 fef1 	bl	800133c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 800055a:	2164      	movs	r1, #100	@ 0x64
 800055c:	4832      	ldr	r0, [pc, #200]	@ (8000628 <main+0x118>)
 800055e:	f000 ff9b 	bl	8001498 <HAL_ADC_PollForConversion>
		uint16_t Result = HAL_ADC_GetValue(&hadc1);
 8000562:	4831      	ldr	r0, [pc, #196]	@ (8000628 <main+0x118>)
 8000564:	f001 f89e 	bl	80016a4 <HAL_ADC_GetValue>
 8000568:	4603      	mov	r3, r0
 800056a:	80fb      	strh	r3, [r7, #6]
		if (Result>3380){
 800056c:	88fb      	ldrh	r3, [r7, #6]
 800056e:	f640 5234 	movw	r2, #3380	@ 0xd34
 8000572:	4293      	cmp	r3, r2
 8000574:	d902      	bls.n	800057c <main+0x6c>
			Result=3380;
 8000576:	f640 5334 	movw	r3, #3380	@ 0xd34
 800057a:	80fb      	strh	r3, [r7, #6]
		}
		Theta = ADC_To_Degree(Result);
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f9bc 	bl	80008fc <ADC_To_Degree>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	4b28      	ldr	r3, [pc, #160]	@ (800062c <main+0x11c>)
 800058a:	701a      	strb	r2, [r3, #0]
		Phi = Theta;
 800058c:	4b27      	ldr	r3, [pc, #156]	@ (800062c <main+0x11c>)
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	4b27      	ldr	r3, [pc, #156]	@ (8000630 <main+0x120>)
 8000592:	701a      	strb	r2, [r3, #0]
		if (Phi > 180) {
 8000594:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <main+0x120>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2bb4      	cmp	r3, #180	@ 0xb4
 800059a:	d902      	bls.n	80005a2 <main+0x92>
			Phi = 180;
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <main+0x120>)
 800059e:	22b4      	movs	r2, #180	@ 0xb4
 80005a0:	701a      	strb	r2, [r3, #0]
		}

		//Servo Motor

		PWM_Value = Degree_to_PWM(Phi);
 80005a2:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <main+0x120>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ff3a 	bl	8000420 <__aeabi_ui2f>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f98a 	bl	80008c8 <Degree_to_PWM>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <main+0x124>)
 80005ba:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_Value);
 80005bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <main+0x124>)
 80005be:	881a      	ldrh	r2, [r3, #0]
 80005c0:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <main+0x114>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	635a      	str	r2, [r3, #52]	@ 0x34

		//Update of LCD

		Len = sprintf(degree_str, "Angle = %03d", (int) Phi);
 80005c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <main+0x120>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	491a      	ldr	r1, [pc, #104]	@ (8000638 <main+0x128>)
 80005ce:	481b      	ldr	r0, [pc, #108]	@ (800063c <main+0x12c>)
 80005d0:	f002 ffd2 	bl	8003578 <siprintf>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <main+0x130>)
 80005da:	701a      	strb	r2, [r3, #0]
		Alcd_PutAt_n(&lcd, 0, 0, degree_str, Len);
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <main+0x130>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	4b16      	ldr	r3, [pc, #88]	@ (800063c <main+0x12c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	480d      	ldr	r0, [pc, #52]	@ (8000620 <main+0x110>)
 80005ea:	f000 fcdc 	bl	8000fa6 <Alcd_PutAt_n>
		//sprintf(pwm_str, "PWM = %d", PWM_Value);
		//Alcd_PutAt_n(&lcd, 1, 0, pwm_str, strlen(pwm_str));
		sprintf(adc_str, "ADC = %04d", Result);
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4914      	ldr	r1, [pc, #80]	@ (8000644 <main+0x134>)
 80005f4:	4814      	ldr	r0, [pc, #80]	@ (8000648 <main+0x138>)
 80005f6:	f002 ffbf 	bl	8003578 <siprintf>
		Alcd_PutAt_n(&lcd, 1, 0, adc_str, 10);
 80005fa:	230a      	movs	r3, #10
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <main+0x138>)
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	4806      	ldr	r0, [pc, #24]	@ (8000620 <main+0x110>)
 8000606:	f000 fcce 	bl	8000fa6 <Alcd_PutAt_n>
		HAL_Delay(500);
 800060a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800060e:	f000 fd99 	bl	8001144 <HAL_Delay>
		Alcd_Clear(&lcd);
 8000612:	4803      	ldr	r0, [pc, #12]	@ (8000620 <main+0x110>)
 8000614:	f000 fce0 	bl	8000fd8 <Alcd_Clear>
	while (1) {
 8000618:	e79c      	b.n	8000554 <main+0x44>
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000
 8000620:	20000000 	.word	0x20000000
 8000624:	200000c8 	.word	0x200000c8
 8000628:	20000098 	.word	0x20000098
 800062c:	20000111 	.word	0x20000111
 8000630:	20000110 	.word	0x20000110
 8000634:	20000112 	.word	0x20000112
 8000638:	08003ef0 	.word	0x08003ef0
 800063c:	20000118 	.word	0x20000118
 8000640:	20000114 	.word	0x20000114
 8000644:	08003f00 	.word	0x08003f00
 8000648:	20000128 	.word	0x20000128

0800064c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	@ 0x50
 8000650:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000652:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000656:	2228      	movs	r2, #40	@ 0x28
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f002 ffac 	bl	80035b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000684:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068a:	2301      	movs	r3, #1
 800068c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000696:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000698:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800069c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800069e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fc1e 	bl	8001ee4 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x66>
		Error_Handler();
 80006ae:	f000 f93f 	bl	8000930 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fe8a 	bl	80023e8 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x92>
		Error_Handler();
 80006da:	f000 f929 	bl	8000930 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006de:	2302      	movs	r3, #2
 80006e0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006e6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fff6 	bl	80026dc <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xae>
		Error_Handler();
 80006f6:	f000 f91b 	bl	8000930 <Error_Handler>
	}
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000714:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_ADC1_Init+0x74>)
 8000716:	4a19      	ldr	r2, [pc, #100]	@ (800077c <MX_ADC1_Init+0x78>)
 8000718:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_ADC1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_ADC1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_ADC1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_ADC1_Init+0x74>)
 800072e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000732:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000734:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_ADC1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_ADC1_Init+0x74>)
 800073c:	2201      	movs	r2, #1
 800073e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000740:	480d      	ldr	r0, [pc, #52]	@ (8000778 <MX_ADC1_Init+0x74>)
 8000742:	f000 fd23 	bl	800118c <HAL_ADC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x4c>
		Error_Handler();
 800074c:	f000 f8f0 	bl	8000930 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8000750:	2307      	movs	r3, #7
 8000752:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000754:	2301      	movs	r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_ADC1_Init+0x74>)
 8000762:	f000 ffab 	bl	80016bc <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x6c>
		Error_Handler();
 800076c:	f000 f8e0 	bl	8000930 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000098 	.word	0x20000098
 800077c:	40012400 	.word	0x40012400

08000780 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	@ 0x38
 8000784:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000786:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]
 80007ae:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80007b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000864 <MX_TIM3_Init+0xe4>)
 80007b2:	4a2d      	ldr	r2, [pc, #180]	@ (8000868 <MX_TIM3_Init+0xe8>)
 80007b4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 71;
 80007b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <MX_TIM3_Init+0xe4>)
 80007b8:	2247      	movs	r2, #71	@ 0x47
 80007ba:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b29      	ldr	r3, [pc, #164]	@ (8000864 <MX_TIM3_Init+0xe4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 19999;
 80007c2:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <MX_TIM3_Init+0xe4>)
 80007c4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007c8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <MX_TIM3_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d0:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <MX_TIM3_Init+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80007d6:	4823      	ldr	r0, [pc, #140]	@ (8000864 <MX_TIM3_Init+0xe4>)
 80007d8:	f002 f8ec 	bl	80029b4 <HAL_TIM_Base_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM3_Init+0x66>
		Error_Handler();
 80007e2:	f000 f8a5 	bl	8000930 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80007ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007f0:	4619      	mov	r1, r3
 80007f2:	481c      	ldr	r0, [pc, #112]	@ (8000864 <MX_TIM3_Init+0xe4>)
 80007f4:	f002 faea 	bl	8002dcc <HAL_TIM_ConfigClockSource>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM3_Init+0x82>
		Error_Handler();
 80007fe:	f000 f897 	bl	8000930 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000802:	4818      	ldr	r0, [pc, #96]	@ (8000864 <MX_TIM3_Init+0xe4>)
 8000804:	f002 f925 	bl	8002a52 <HAL_TIM_PWM_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0x92>
		Error_Handler();
 800080e:	f000 f88f 	bl	8000930 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	4619      	mov	r1, r3
 8000820:	4810      	ldr	r0, [pc, #64]	@ (8000864 <MX_TIM3_Init+0xe4>)
 8000822:	f002 fe4b 	bl	80034bc <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 800082c:	f000 f880 	bl	8000930 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000830:	2360      	movs	r3, #96	@ 0x60
 8000832:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	4619      	mov	r1, r3
 8000846:	4807      	ldr	r0, [pc, #28]	@ (8000864 <MX_TIM3_Init+0xe4>)
 8000848:	f002 f9fe 	bl	8002c48 <HAL_TIM_PWM_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000852:	f000 f86d 	bl	8000930 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000856:	4803      	ldr	r0, [pc, #12]	@ (8000864 <MX_TIM3_Init+0xe4>)
 8000858:	f000 f8fc 	bl	8000a54 <HAL_TIM_MspPostInit>

}
 800085c:	bf00      	nop
 800085e:	3738      	adds	r7, #56	@ 0x38
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200000c8 	.word	0x200000c8
 8000868:	40000400 	.word	0x40000400

0800086c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_GPIO_Init+0x58>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a13      	ldr	r2, [pc, #76]	@ (80008c4 <MX_GPIO_Init+0x58>)
 8000878:	f043 0320 	orr.w	r3, r3, #32
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_GPIO_Init+0x58>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f003 0320 	and.w	r3, r3, #32
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_GPIO_Init+0x58>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	4a0d      	ldr	r2, [pc, #52]	@ (80008c4 <MX_GPIO_Init+0x58>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6193      	str	r3, [r2, #24]
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <MX_GPIO_Init+0x58>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <MX_GPIO_Init+0x58>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4a07      	ldr	r2, [pc, #28]	@ (80008c4 <MX_GPIO_Init+0x58>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6193      	str	r3, [r2, #24]
 80008ae:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <MX_GPIO_Init+0x58>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	40021000 	.word	0x40021000

080008c8 <Degree_to_PWM>:

/* USER CODE BEGIN 4 */
uint32_t Degree_to_PWM(float phi) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

	return ((float) ((1900 / 180) * phi) + 500);
 80008d0:	4908      	ldr	r1, [pc, #32]	@ (80008f4 <Degree_to_PWM+0x2c>)
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff fc3a 	bl	800014c <__aeabi_fmul>
 80008d8:	4603      	mov	r3, r0
 80008da:	4907      	ldr	r1, [pc, #28]	@ (80008f8 <Degree_to_PWM+0x30>)
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fcef 	bl	80002c0 <__addsf3>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fdf3 	bl	80004d0 <__aeabi_f2uiz>
 80008ea:	4603      	mov	r3, r0

}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	41200000 	.word	0x41200000
 80008f8:	43fa0000 	.word	0x43fa0000

080008fc <ADC_To_Degree>:

uint8_t ADC_To_Degree(uint16_t ADC) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]

	return ((float) (ADC * (3.0f / 40.0f)));
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fd8d 	bl	8000428 <__aeabi_i2f>
 800090e:	4603      	mov	r3, r0
 8000910:	4906      	ldr	r1, [pc, #24]	@ (800092c <ADC_To_Degree+0x30>)
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fc1a 	bl	800014c <__aeabi_fmul>
 8000918:	4603      	mov	r3, r0
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fdd8 	bl	80004d0 <__aeabi_f2uiz>
 8000920:	4603      	mov	r3, r0
 8000922:	b2db      	uxtb	r3, r3

}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	3d99999a 	.word	0x3d99999a

08000930 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <Error_Handler+0x8>

0800093c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <HAL_MspInit+0x5c>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a14      	ldr	r2, [pc, #80]	@ (8000998 <HAL_MspInit+0x5c>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <HAL_MspInit+0x5c>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <HAL_MspInit+0x5c>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a0e      	ldr	r2, [pc, #56]	@ (8000998 <HAL_MspInit+0x5c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <HAL_MspInit+0x5c>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <HAL_MspInit+0x60>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	4a04      	ldr	r2, [pc, #16]	@ (800099c <HAL_MspInit+0x60>)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000
 800099c:	40010000 	.word	0x40010000

080009a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <HAL_ADC_MspInit+0x6c>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d121      	bne.n	8000a04 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <HAL_ADC_MspInit+0x70>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <HAL_ADC_MspInit+0x70>)
 80009c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <HAL_ADC_MspInit+0x70>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <HAL_ADC_MspInit+0x70>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000a10 <HAL_ADC_MspInit+0x70>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <HAL_ADC_MspInit+0x70>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009f0:	2380      	movs	r3, #128	@ 0x80
 80009f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f4:	2303      	movs	r3, #3
 80009f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4619      	mov	r1, r3
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <HAL_ADC_MspInit+0x74>)
 8000a00:	f001 f8d4 	bl	8001bac <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40012400 	.word	0x40012400
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40010800 	.word	0x40010800

08000a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a09      	ldr	r2, [pc, #36]	@ (8000a4c <HAL_TIM_Base_MspInit+0x34>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10b      	bne.n	8000a42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_TIM_Base_MspInit+0x38>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_TIM_Base_MspInit+0x38>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_TIM_Base_MspInit+0x38>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	40000400 	.word	0x40000400
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a18      	ldr	r2, [pc, #96]	@ (8000ad0 <HAL_TIM_MspPostInit+0x7c>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d129      	bne.n	8000ac8 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <HAL_TIM_MspPostInit+0x80>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a16      	ldr	r2, [pc, #88]	@ (8000ad4 <HAL_TIM_MspPostInit+0x80>)
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <HAL_TIM_MspPostInit+0x80>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480e      	ldr	r0, [pc, #56]	@ (8000ad8 <HAL_TIM_MspPostInit+0x84>)
 8000aa0:	f001 f884 	bl	8001bac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <HAL_TIM_MspPostInit+0x88>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	4a06      	ldr	r2, [pc, #24]	@ (8000adc <HAL_TIM_MspPostInit+0x88>)
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40000400 	.word	0x40000400
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010c00 	.word	0x40010c00
 8000adc:	40010000 	.word	0x40010000

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <MemManage_Handler+0x4>

08000af8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 faec 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f002 fd2e 	bl	80035c8 <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20005000 	.word	0x20005000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	20000138 	.word	0x20000138
 8000ba0:	20000288 	.word	0x20000288

08000ba4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb0:	f7ff fff8 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480b      	ldr	r0, [pc, #44]	@ (8000be4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bb6:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a09      	ldr	r2, [pc, #36]	@ (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bcc:	4c09      	ldr	r4, [pc, #36]	@ (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f002 fcfb 	bl	80035d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bde:	f7ff fc97 	bl	8000510 <main>
  bx lr
 8000be2:	4770      	bx	lr
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000bec:	08003f88 	.word	0x08003f88
  ldr r2, =_sbss
 8000bf0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000bf4:	20000288 	.word	0x20000288

08000bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_2_IRQHandler>
	...

08000bfc <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <DWT_Delay_Init+0x58>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	4a13      	ldr	r2, [pc, #76]	@ (8000c54 <DWT_Delay_Init+0x58>)
 8000c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000c0a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <DWT_Delay_Init+0x58>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <DWT_Delay_Init+0x58>)
 8000c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c16:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <DWT_Delay_Init+0x5c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c58 <DWT_Delay_Init+0x5c>)
 8000c1e:	f023 0301 	bic.w	r3, r3, #1
 8000c22:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <DWT_Delay_Init+0x5c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0b      	ldr	r2, [pc, #44]	@ (8000c58 <DWT_Delay_Init+0x5c>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c30:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <DWT_Delay_Init+0x5c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000c36:	bf00      	nop
     __ASM volatile ("NOP");
 8000c38:	bf00      	nop
  __ASM volatile ("NOP");
 8000c3a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <DWT_Delay_Init+0x5c>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000c44:	2300      	movs	r3, #0
 8000c46:	e000      	b.n	8000c4a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000c48:	2301      	movs	r3, #1
  }
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000edf0 	.word	0xe000edf0
 8000c58:	e0001000 	.word	0xe0001000

08000c5c <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c64:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <DWT_Delay_us+0x40>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000c6a:	f001 fcfb 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <DWT_Delay_us+0x44>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	0c9b      	lsrs	r3, r3, #18
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	fb02 f303 	mul.w	r3, r2, r3
 8000c7e:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000c80:	bf00      	nop
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <DWT_Delay_us+0x40>)
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	1ad2      	subs	r2, r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d3f8      	bcc.n	8000c82 <DWT_Delay_us+0x26>
		;
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e0001000 	.word	0xe0001000
 8000ca0:	431bde83 	.word	0x431bde83

08000ca4 <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ffd3 	bl	8000c5c <DWT_Delay_us>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7a1b      	ldrb	r3, [r3, #8]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	7a09      	ldrb	r1, [r1, #8]
 8000cf2:	408b      	lsls	r3, r1
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	60da      	str	r2, [r3, #12]
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6958      	ldr	r0, [r3, #20]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	8b1b      	ldrh	r3, [r3, #24]
 8000d1c:	78fa      	ldrb	r2, [r7, #3]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f001 f8c8 	bl	8001eb4 <HAL_GPIO_WritePin>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68d8      	ldr	r0, [r3, #12]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	8a1b      	ldrh	r3, [r3, #16]
 8000d40:	78fa      	ldrb	r2, [r7, #3]
 8000d42:	4619      	mov	r1, r3
 8000d44:	f001 f8b6 	bl	8001eb4 <HAL_GPIO_WritePin>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	2302      	movs	r3, #2
 8000d72:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	f107 0208 	add.w	r2, r7, #8
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 ff14 	bl	8001bac <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	8a1b      	ldrh	r3, [r3, #16]
 8000d88:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	f107 0208 	add.w	r2, r7, #8
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 ff09 	bl	8001bac <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7a1b      	ldrb	r3, [r3, #8]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	230f      	movs	r3, #15
 8000da2:	4093      	lsls	r3, r2
 8000da4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f107 0208 	add.w	r2, r7, #8
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fefb 	bl	8001bac <HAL_GPIO_Init>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	70fb      	strb	r3, [r7, #3]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff98 	bl	8000d08 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8000dd8:	78bb      	ldrb	r3, [r7, #2]
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4619      	mov	r1, r3
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff6c 	bl	8000cbe <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8000de6:	2101      	movs	r1, #1
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff9f 	bl	8000d2c <EN_SET>
 8000dee:	200a      	movs	r0, #10
 8000df0:	f7ff ff58 	bl	8000ca4 <usDelay>
 8000df4:	2100      	movs	r1, #0
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ff98 	bl	8000d2c <EN_SET>
 8000dfc:	2064      	movs	r0, #100	@ 0x64
 8000dfe:	f7ff ff51 	bl	8000ca4 <usDelay>
	;
	Write_HalfByte(lcd, value);
 8000e02:	78bb      	ldrb	r3, [r7, #2]
 8000e04:	4619      	mov	r1, r3
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ff59 	bl	8000cbe <Write_HalfByte>
	PulseEn
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff8c 	bl	8000d2c <EN_SET>
 8000e14:	200a      	movs	r0, #10
 8000e16:	f7ff ff45 	bl	8000ca4 <usDelay>
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff85 	bl	8000d2c <EN_SET>
 8000e22:	2064      	movs	r0, #100	@ 0x64
 8000e24:	f7ff ff3e 	bl	8000ca4 <usDelay>
	;
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8000e40:	f7ff fedc 	bl	8000bfc <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff83 	bl	8000d50 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2240      	movs	r2, #64	@ 0x40
 8000e54:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	78ba      	ldrb	r2, [r7, #2]
 8000e5a:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8000e5c:	78bb      	ldrb	r3, [r7, #2]
 8000e5e:	3340      	adds	r3, #64	@ 0x40
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8000e66:	2100      	movs	r1, #0
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff4d 	bl	8000d08 <RS_SET>
	EN_SET(lcd, 0);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff5b 	bl	8000d2c <EN_SET>
	usDelay(50000);
 8000e76:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e7a:	f7ff ff13 	bl	8000ca4 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e018      	b.n	8000eb6 <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 8000e84:	2103      	movs	r1, #3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff19 	bl	8000cbe <Write_HalfByte>
		PulseEn
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ff4c 	bl	8000d2c <EN_SET>
 8000e94:	200a      	movs	r0, #10
 8000e96:	f7ff ff05 	bl	8000ca4 <usDelay>
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff45 	bl	8000d2c <EN_SET>
 8000ea2:	2064      	movs	r0, #100	@ 0x64
 8000ea4:	f7ff fefe 	bl	8000ca4 <usDelay>
		;
		usDelay(4500);
 8000ea8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000eac:	f7ff fefa 	bl	8000ca4 <usDelay>
	for (x = 0; x < 2; x++)
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d9e3      	bls.n	8000e84 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8000ebc:	2103      	movs	r1, #3
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fefd 	bl	8000cbe <Write_HalfByte>
	PulseEn
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff30 	bl	8000d2c <EN_SET>
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f7ff fee9 	bl	8000ca4 <usDelay>
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff29 	bl	8000d2c <EN_SET>
 8000eda:	2064      	movs	r0, #100	@ 0x64
 8000edc:	f7ff fee2 	bl	8000ca4 <usDelay>
	;
	usDelay(150);
 8000ee0:	2096      	movs	r0, #150	@ 0x96
 8000ee2:	f7ff fedf 	bl	8000ca4 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff fee8 	bl	8000cbe <Write_HalfByte>
	PulseEn
 8000eee:	2101      	movs	r1, #1
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff1b 	bl	8000d2c <EN_SET>
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f7ff fed4 	bl	8000ca4 <usDelay>
 8000efc:	2100      	movs	r1, #0
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff14 	bl	8000d2c <EN_SET>
 8000f04:	2064      	movs	r0, #100	@ 0x64
 8000f06:	f7ff fecd 	bl	8000ca4 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8000f0a:	2228      	movs	r2, #40	@ 0x28
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff55 	bl	8000dbe <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8000f14:	2300      	movs	r3, #0
 8000f16:	2200      	movs	r2, #0
 8000f18:	2101      	movs	r1, #1
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f86d 	bl	8000ffa <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f859 	bl	8000fd8 <Alcd_Clear>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	70fb      	strb	r3, [r7, #3]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	7e9a      	ldrb	r2, [r3, #26]
 8000f46:	78bb      	ldrb	r3, [r7, #2]
 8000f48:	4413      	add	r3, r2
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	2100      	movs	r1, #0
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff2f 	bl	8000dbe <Alcd_SendByte>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	4613      	mov	r3, r2
 8000f74:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	75fb      	strb	r3, [r7, #23]
 8000f7a:	e00b      	b.n	8000f94 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	2101      	movs	r1, #1
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f7ff ff18 	bl	8000dbe <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	3301      	adds	r3, #1
 8000f92:	75fb      	strb	r3, [r7, #23]
 8000f94:	7dfa      	ldrb	r2, [r7, #23]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d3ef      	bcc.n	8000f7c <Alcd_Put_n+0x14>
	}
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	72fb      	strb	r3, [r7, #11]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8000fb8:	7aba      	ldrb	r2, [r7, #10]
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f7ff ffb5 	bl	8000f2e <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8000fc4:	7e3b      	ldrb	r3, [r7, #24]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff ffcc 	bl	8000f68 <Alcd_Put_n>
}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff feea 	bl	8000dbe <Alcd_SendByte>
	usDelay(2000);
 8000fea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fee:	f7ff fe59 	bl	8000ca4 <usDelay>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	4608      	mov	r0, r1
 8001004:	4611      	mov	r1, r2
 8001006:	461a      	mov	r2, r3
 8001008:	4603      	mov	r3, r0
 800100a:	70fb      	strb	r3, [r7, #3]
 800100c:	460b      	mov	r3, r1
 800100e:	70bb      	strb	r3, [r7, #2]
 8001010:	4613      	mov	r3, r2
 8001012:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7f9b      	ldrb	r3, [r3, #30]
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	b2da      	uxtb	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 800102e:	78bb      	ldrb	r3, [r7, #2]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7f9b      	ldrb	r3, [r3, #30]
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	b2da      	uxtb	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 8001042:	787b      	ldrb	r3, [r7, #1]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7f9b      	ldrb	r3, [r3, #30]
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7f9b      	ldrb	r3, [r3, #30]
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	b2da      	uxtb	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7f9b      	ldrb	r3, [r3, #30]
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	b2db      	uxtb	r3, r3
 800106e:	461a      	mov	r2, r3
 8001070:	2100      	movs	r1, #0
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff fea3 	bl	8000dbe <Alcd_SendByte>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_Init+0x28>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <HAL_Init+0x28>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 fd57 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fc4e 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40022000 	.word	0x40022000

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fd61 	bl	8001b92 <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 fd37 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000020 	.word	0x20000020
 8001104:	20000028 	.word	0x20000028
 8001108:	20000024 	.word	0x20000024

0800110c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <HAL_IncTick+0x1c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_IncTick+0x20>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a03      	ldr	r2, [pc, #12]	@ (800112c <HAL_IncTick+0x20>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	20000028 	.word	0x20000028
 800112c:	2000013c 	.word	0x2000013c

08001130 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b02      	ldr	r3, [pc, #8]	@ (8001140 <HAL_GetTick+0x10>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	2000013c 	.word	0x2000013c

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff fff0 	bl	8001130 <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_Delay+0x44>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116a:	bf00      	nop
 800116c:	f7ff ffe0 	bl	8001130 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000028 	.word	0x20000028

0800118c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0be      	b.n	800132c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d109      	bne.n	80011d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff fbe8 	bl	80009a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 fbc5 	bl	8001960 <ADC_ConversionStop_Disable>
 80011d6:	4603      	mov	r3, r0
 80011d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 8099 	bne.w	800131a <HAL_ADC_Init+0x18e>
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 8095 	bne.w	800131a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011f8:	f023 0302 	bic.w	r3, r3, #2
 80011fc:	f043 0202 	orr.w	r2, r3, #2
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800120c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7b1b      	ldrb	r3, [r3, #12]
 8001212:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001214:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	4313      	orrs	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001224:	d003      	beq.n	800122e <HAL_ADC_Init+0xa2>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d102      	bne.n	8001234 <HAL_ADC_Init+0xa8>
 800122e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001232:	e000      	b.n	8001236 <HAL_ADC_Init+0xaa>
 8001234:	2300      	movs	r3, #0
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7d1b      	ldrb	r3, [r3, #20]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d119      	bne.n	8001278 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7b1b      	ldrb	r3, [r3, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d109      	bne.n	8001260 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	3b01      	subs	r3, #1
 8001252:	035a      	lsls	r2, r3, #13
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	e00b      	b.n	8001278 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001264:	f043 0220 	orr.w	r2, r3, #32
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	430a      	orrs	r2, r1
 800128a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	4b28      	ldr	r3, [pc, #160]	@ (8001334 <HAL_ADC_Init+0x1a8>)
 8001294:	4013      	ands	r3, r2
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	430b      	orrs	r3, r1
 800129e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012a8:	d003      	beq.n	80012b2 <HAL_ADC_Init+0x126>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d104      	bne.n	80012bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	051b      	lsls	r3, r3, #20
 80012ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <HAL_ADC_Init+0x1ac>)
 80012d8:	4013      	ands	r3, r2
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d10b      	bne.n	80012f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012f6:	e018      	b.n	800132a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fc:	f023 0312 	bic.w	r3, r3, #18
 8001300:	f043 0210 	orr.w	r2, r3, #16
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001318:	e007      	b.n	800132a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131e:	f043 0210 	orr.w	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800132a:	7dfb      	ldrb	r3, [r7, #23]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	ffe1f7fd 	.word	0xffe1f7fd
 8001338:	ff1f0efe 	.word	0xff1f0efe

0800133c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Start+0x1a>
 8001352:	2302      	movs	r3, #2
 8001354:	e098      	b.n	8001488 <HAL_ADC_Start+0x14c>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 faa4 	bl	80018ac <ADC_Enable>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f040 8087 	bne.w	800147e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a41      	ldr	r2, [pc, #260]	@ (8001490 <HAL_ADC_Start+0x154>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d105      	bne.n	800139a <HAL_ADC_Start+0x5e>
 800138e:	4b41      	ldr	r3, [pc, #260]	@ (8001494 <HAL_ADC_Start+0x158>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d115      	bne.n	80013c6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d026      	beq.n	8001402 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013c4:	e01d      	b.n	8001402 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001494 <HAL_ADC_Start+0x158>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d004      	beq.n	80013e6 <HAL_ADC_Start+0xaa>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001490 <HAL_ADC_Start+0x154>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d10d      	bne.n	8001402 <HAL_ADC_Start+0xc6>
 80013e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001494 <HAL_ADC_Start+0x158>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001406:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001412:	f023 0206 	bic.w	r2, r3, #6
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	62da      	str	r2, [r3, #44]	@ 0x2c
 800141a:	e002      	b.n	8001422 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f06f 0202 	mvn.w	r2, #2
 8001432:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800143e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001442:	d113      	bne.n	800146c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001448:	4a11      	ldr	r2, [pc, #68]	@ (8001490 <HAL_ADC_Start+0x154>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d105      	bne.n	800145a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <HAL_ADC_Start+0x158>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001456:	2b00      	cmp	r3, #0
 8001458:	d108      	bne.n	800146c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	e00c      	b.n	8001486 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	e003      	b.n	8001486 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40012800 	.word	0x40012800
 8001494:	40012400 	.word	0x40012400

08001498 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014ae:	f7ff fe3f 	bl	8001130 <HAL_GetTick>
 80014b2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c6:	f043 0220 	orr.w	r2, r3, #32
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0d3      	b.n	8001682 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d131      	bne.n	800154c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d12a      	bne.n	800154c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014f6:	e021      	b.n	800153c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fe:	d01d      	beq.n	800153c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_ADC_PollForConversion+0x7e>
 8001506:	f7ff fe13 	bl	8001130 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d212      	bcs.n	800153c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10b      	bne.n	800153c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001528:	f043 0204 	orr.w	r2, r3, #4
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e0a2      	b.n	8001682 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0d6      	beq.n	80014f8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800154a:	e070      	b.n	800162e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800154c:	4b4f      	ldr	r3, [pc, #316]	@ (800168c <HAL_ADC_PollForConversion+0x1f4>)
 800154e:	681c      	ldr	r4, [r3, #0]
 8001550:	2002      	movs	r0, #2
 8001552:	f001 f979 	bl	8002848 <HAL_RCCEx_GetPeriphCLKFreq>
 8001556:	4603      	mov	r3, r0
 8001558:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6919      	ldr	r1, [r3, #16]
 8001562:	4b4b      	ldr	r3, [pc, #300]	@ (8001690 <HAL_ADC_PollForConversion+0x1f8>)
 8001564:	400b      	ands	r3, r1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_ADC_PollForConversion+0x104>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68d9      	ldr	r1, [r3, #12]
 8001570:	4b48      	ldr	r3, [pc, #288]	@ (8001694 <HAL_ADC_PollForConversion+0x1fc>)
 8001572:	400b      	ands	r3, r1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d111      	bne.n	800159c <HAL_ADC_PollForConversion+0x104>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6919      	ldr	r1, [r3, #16]
 800157e:	4b46      	ldr	r3, [pc, #280]	@ (8001698 <HAL_ADC_PollForConversion+0x200>)
 8001580:	400b      	ands	r3, r1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d108      	bne.n	8001598 <HAL_ADC_PollForConversion+0x100>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68d9      	ldr	r1, [r3, #12]
 800158c:	4b43      	ldr	r3, [pc, #268]	@ (800169c <HAL_ADC_PollForConversion+0x204>)
 800158e:	400b      	ands	r3, r1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_ADC_PollForConversion+0x100>
 8001594:	2314      	movs	r3, #20
 8001596:	e020      	b.n	80015da <HAL_ADC_PollForConversion+0x142>
 8001598:	2329      	movs	r3, #41	@ 0x29
 800159a:	e01e      	b.n	80015da <HAL_ADC_PollForConversion+0x142>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6919      	ldr	r1, [r3, #16]
 80015a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001698 <HAL_ADC_PollForConversion+0x200>)
 80015a4:	400b      	ands	r3, r1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d106      	bne.n	80015b8 <HAL_ADC_PollForConversion+0x120>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68d9      	ldr	r1, [r3, #12]
 80015b0:	4b3a      	ldr	r3, [pc, #232]	@ (800169c <HAL_ADC_PollForConversion+0x204>)
 80015b2:	400b      	ands	r3, r1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00d      	beq.n	80015d4 <HAL_ADC_PollForConversion+0x13c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6919      	ldr	r1, [r3, #16]
 80015be:	4b38      	ldr	r3, [pc, #224]	@ (80016a0 <HAL_ADC_PollForConversion+0x208>)
 80015c0:	400b      	ands	r3, r1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d108      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x140>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68d9      	ldr	r1, [r3, #12]
 80015cc:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <HAL_ADC_PollForConversion+0x208>)
 80015ce:	400b      	ands	r3, r1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x140>
 80015d4:	2354      	movs	r3, #84	@ 0x54
 80015d6:	e000      	b.n	80015da <HAL_ADC_PollForConversion+0x142>
 80015d8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015e0:	e021      	b.n	8001626 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d01a      	beq.n	8001620 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d007      	beq.n	8001600 <HAL_ADC_PollForConversion+0x168>
 80015f0:	f7ff fd9e 	bl	8001130 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d20f      	bcs.n	8001620 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d90b      	bls.n	8001620 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160c:	f043 0204 	orr.w	r2, r3, #4
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e030      	b.n	8001682 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3301      	adds	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	429a      	cmp	r2, r3
 800162c:	d8d9      	bhi.n	80015e2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f06f 0212 	mvn.w	r2, #18
 8001636:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800164e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001652:	d115      	bne.n	8001680 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001658:	2b00      	cmp	r3, #0
 800165a:	d111      	bne.n	8001680 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001660:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd90      	pop	{r4, r7, pc}
 800168a:	bf00      	nop
 800168c:	20000020 	.word	0x20000020
 8001690:	24924924 	.word	0x24924924
 8001694:	00924924 	.word	0x00924924
 8001698:	12492492 	.word	0x12492492
 800169c:	00492492 	.word	0x00492492
 80016a0:	00249249 	.word	0x00249249

080016a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x20>
 80016d8:	2302      	movs	r3, #2
 80016da:	e0dc      	b.n	8001896 <HAL_ADC_ConfigChannel+0x1da>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	d81c      	bhi.n	8001726 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	3b05      	subs	r3, #5
 80016fe:	221f      	movs	r2, #31
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	4019      	ands	r1, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	3b05      	subs	r3, #5
 8001718:	fa00 f203 	lsl.w	r2, r0, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	635a      	str	r2, [r3, #52]	@ 0x34
 8001724:	e03c      	b.n	80017a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b0c      	cmp	r3, #12
 800172c:	d81c      	bhi.n	8001768 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	3b23      	subs	r3, #35	@ 0x23
 8001740:	221f      	movs	r2, #31
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	4019      	ands	r1, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	3b23      	subs	r3, #35	@ 0x23
 800175a:	fa00 f203 	lsl.w	r2, r0, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	631a      	str	r2, [r3, #48]	@ 0x30
 8001766:	e01b      	b.n	80017a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	3b41      	subs	r3, #65	@ 0x41
 800177a:	221f      	movs	r2, #31
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	4019      	ands	r1, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	3b41      	subs	r3, #65	@ 0x41
 8001794:	fa00 f203 	lsl.w	r2, r0, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b09      	cmp	r3, #9
 80017a6:	d91c      	bls.n	80017e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68d9      	ldr	r1, [r3, #12]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	3b1e      	subs	r3, #30
 80017ba:	2207      	movs	r2, #7
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4019      	ands	r1, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6898      	ldr	r0, [r3, #8]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	3b1e      	subs	r3, #30
 80017d4:	fa00 f203 	lsl.w	r2, r0, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	e019      	b.n	8001816 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6919      	ldr	r1, [r3, #16]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	2207      	movs	r2, #7
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4019      	ands	r1, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6898      	ldr	r0, [r3, #8]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	fa00 f203 	lsl.w	r2, r0, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b10      	cmp	r3, #16
 800181c:	d003      	beq.n	8001826 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001822:	2b11      	cmp	r3, #17
 8001824:	d132      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1d      	ldr	r2, [pc, #116]	@ (80018a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d125      	bne.n	800187c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d126      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800184c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b10      	cmp	r3, #16
 8001854:	d11a      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001856:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a13      	ldr	r2, [pc, #76]	@ (80018a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	0c9a      	lsrs	r2, r3, #18
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800186c:	e002      	b.n	8001874 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3b01      	subs	r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f9      	bne.n	800186e <HAL_ADC_ConfigChannel+0x1b2>
 800187a:	e007      	b.n	800188c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001880:	f043 0220 	orr.w	r2, r3, #32
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	40012400 	.word	0x40012400
 80018a4:	20000020 	.word	0x20000020
 80018a8:	431bde83 	.word	0x431bde83

080018ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d040      	beq.n	800194c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0201 	orr.w	r2, r2, #1
 80018d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018da:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <ADC_Enable+0xac>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a1f      	ldr	r2, [pc, #124]	@ (800195c <ADC_Enable+0xb0>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	0c9b      	lsrs	r3, r3, #18
 80018e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018e8:	e002      	b.n	80018f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f9      	bne.n	80018ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018f6:	f7ff fc1b 	bl	8001130 <HAL_GetTick>
 80018fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018fc:	e01f      	b.n	800193e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018fe:	f7ff fc17 	bl	8001130 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d918      	bls.n	800193e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b01      	cmp	r3, #1
 8001918:	d011      	beq.n	800193e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191e:	f043 0210 	orr.w	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e007      	b.n	800194e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b01      	cmp	r3, #1
 800194a:	d1d8      	bne.n	80018fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000020 	.word	0x20000020
 800195c:	431bde83 	.word	0x431bde83

08001960 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d12e      	bne.n	80019d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0201 	bic.w	r2, r2, #1
 8001988:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800198a:	f7ff fbd1 	bl	8001130 <HAL_GetTick>
 800198e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001990:	e01b      	b.n	80019ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001992:	f7ff fbcd 	bl	8001130 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d914      	bls.n	80019ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d10d      	bne.n	80019ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b2:	f043 0210 	orr.w	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019be:	f043 0201 	orr.w	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e007      	b.n	80019da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d0dc      	beq.n	8001992 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	@ (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	db0a      	blt.n	8001a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	490c      	ldr	r1, [pc, #48]	@ (8001a94 <__NVIC_SetPriority+0x4c>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	0112      	lsls	r2, r2, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a70:	e00a      	b.n	8001a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4908      	ldr	r1, [pc, #32]	@ (8001a98 <__NVIC_SetPriority+0x50>)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	440b      	add	r3, r1
 8001a86:	761a      	strb	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000e100 	.word	0xe000e100
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	@ 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f1c3 0307 	rsb	r3, r3, #7
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	bf28      	it	cs
 8001aba:	2304      	movcs	r3, #4
 8001abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d902      	bls.n	8001acc <NVIC_EncodePriority+0x30>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3b03      	subs	r3, #3
 8001aca:	e000      	b.n	8001ace <NVIC_EncodePriority+0x32>
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	4313      	orrs	r3, r2
         );
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3724      	adds	r7, #36	@ 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff90 	bl	8001a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff49 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff5e 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff90 	bl	8001a9c <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5f 	bl	8001a48 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffb0 	bl	8001b00 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b08b      	sub	sp, #44	@ 0x2c
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbe:	e169      	b.n	8001e94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	f040 8158 	bne.w	8001e8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4a9a      	ldr	r2, [pc, #616]	@ (8001e4c <HAL_GPIO_Init+0x2a0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d05e      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001be8:	4a98      	ldr	r2, [pc, #608]	@ (8001e4c <HAL_GPIO_Init+0x2a0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d875      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001bee:	4a98      	ldr	r2, [pc, #608]	@ (8001e50 <HAL_GPIO_Init+0x2a4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d058      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001bf4:	4a96      	ldr	r2, [pc, #600]	@ (8001e50 <HAL_GPIO_Init+0x2a4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d86f      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001bfa:	4a96      	ldr	r2, [pc, #600]	@ (8001e54 <HAL_GPIO_Init+0x2a8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d052      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001c00:	4a94      	ldr	r2, [pc, #592]	@ (8001e54 <HAL_GPIO_Init+0x2a8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d869      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c06:	4a94      	ldr	r2, [pc, #592]	@ (8001e58 <HAL_GPIO_Init+0x2ac>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d04c      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001c0c:	4a92      	ldr	r2, [pc, #584]	@ (8001e58 <HAL_GPIO_Init+0x2ac>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d863      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c12:	4a92      	ldr	r2, [pc, #584]	@ (8001e5c <HAL_GPIO_Init+0x2b0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d046      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001c18:	4a90      	ldr	r2, [pc, #576]	@ (8001e5c <HAL_GPIO_Init+0x2b0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d85d      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c1e:	2b12      	cmp	r3, #18
 8001c20:	d82a      	bhi.n	8001c78 <HAL_GPIO_Init+0xcc>
 8001c22:	2b12      	cmp	r3, #18
 8001c24:	d859      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c26:	a201      	add	r2, pc, #4	@ (adr r2, 8001c2c <HAL_GPIO_Init+0x80>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001ca7 	.word	0x08001ca7
 8001c30:	08001c81 	.word	0x08001c81
 8001c34:	08001c93 	.word	0x08001c93
 8001c38:	08001cd5 	.word	0x08001cd5
 8001c3c:	08001cdb 	.word	0x08001cdb
 8001c40:	08001cdb 	.word	0x08001cdb
 8001c44:	08001cdb 	.word	0x08001cdb
 8001c48:	08001cdb 	.word	0x08001cdb
 8001c4c:	08001cdb 	.word	0x08001cdb
 8001c50:	08001cdb 	.word	0x08001cdb
 8001c54:	08001cdb 	.word	0x08001cdb
 8001c58:	08001cdb 	.word	0x08001cdb
 8001c5c:	08001cdb 	.word	0x08001cdb
 8001c60:	08001cdb 	.word	0x08001cdb
 8001c64:	08001cdb 	.word	0x08001cdb
 8001c68:	08001cdb 	.word	0x08001cdb
 8001c6c:	08001cdb 	.word	0x08001cdb
 8001c70:	08001c89 	.word	0x08001c89
 8001c74:	08001c9d 	.word	0x08001c9d
 8001c78:	4a79      	ldr	r2, [pc, #484]	@ (8001e60 <HAL_GPIO_Init+0x2b4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c7e:	e02c      	b.n	8001cda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	623b      	str	r3, [r7, #32]
          break;
 8001c86:	e029      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	623b      	str	r3, [r7, #32]
          break;
 8001c90:	e024      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	3308      	adds	r3, #8
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e01f      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	330c      	adds	r3, #12
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e01a      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	623b      	str	r3, [r7, #32]
          break;
 8001cb2:	e013      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	611a      	str	r2, [r3, #16]
          break;
 8001cc6:	e009      	b.n	8001cdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc8:	2308      	movs	r3, #8
 8001cca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	615a      	str	r2, [r3, #20]
          break;
 8001cd2:	e003      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
          break;
 8001cd8:	e000      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          break;
 8001cda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2bff      	cmp	r3, #255	@ 0xff
 8001ce0:	d801      	bhi.n	8001ce6 <HAL_GPIO_Init+0x13a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	e001      	b.n	8001cea <HAL_GPIO_Init+0x13e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2bff      	cmp	r3, #255	@ 0xff
 8001cf0:	d802      	bhi.n	8001cf8 <HAL_GPIO_Init+0x14c>
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	e002      	b.n	8001cfe <HAL_GPIO_Init+0x152>
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	3b08      	subs	r3, #8
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	210f      	movs	r1, #15
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	6a39      	ldr	r1, [r7, #32]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80b1 	beq.w	8001e8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e64 <HAL_GPIO_Init+0x2b8>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a4c      	ldr	r2, [pc, #304]	@ (8001e64 <HAL_GPIO_Init+0x2b8>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b4a      	ldr	r3, [pc, #296]	@ (8001e64 <HAL_GPIO_Init+0x2b8>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d44:	4a48      	ldr	r2, [pc, #288]	@ (8001e68 <HAL_GPIO_Init+0x2bc>)
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a40      	ldr	r2, [pc, #256]	@ (8001e6c <HAL_GPIO_Init+0x2c0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_GPIO_Init+0x1ec>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a3f      	ldr	r2, [pc, #252]	@ (8001e70 <HAL_GPIO_Init+0x2c4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00d      	beq.n	8001d94 <HAL_GPIO_Init+0x1e8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d007      	beq.n	8001d90 <HAL_GPIO_Init+0x1e4>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a3d      	ldr	r2, [pc, #244]	@ (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d101      	bne.n	8001d8c <HAL_GPIO_Init+0x1e0>
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e006      	b.n	8001d9a <HAL_GPIO_Init+0x1ee>
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	e004      	b.n	8001d9a <HAL_GPIO_Init+0x1ee>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e002      	b.n	8001d9a <HAL_GPIO_Init+0x1ee>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_GPIO_Init+0x1ee>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d9c:	f002 0203 	and.w	r2, r2, #3
 8001da0:	0092      	lsls	r2, r2, #2
 8001da2:	4093      	lsls	r3, r2
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001daa:	492f      	ldr	r1, [pc, #188]	@ (8001e68 <HAL_GPIO_Init+0x2bc>)
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	492c      	ldr	r1, [pc, #176]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4928      	ldr	r1, [pc, #160]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dec:	4b23      	ldr	r3, [pc, #140]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	4922      	ldr	r1, [pc, #136]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60cb      	str	r3, [r1, #12]
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dfa:	4b20      	ldr	r3, [pc, #128]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	491e      	ldr	r1, [pc, #120]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4918      	ldr	r1, [pc, #96]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e22:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4914      	ldr	r1, [pc, #80]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d021      	beq.n	8001e80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	490e      	ldr	r1, [pc, #56]	@ (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e021      	b.n	8001e8e <HAL_GPIO_Init+0x2e2>
 8001e4a:	bf00      	nop
 8001e4c:	10320000 	.word	0x10320000
 8001e50:	10310000 	.word	0x10310000
 8001e54:	10220000 	.word	0x10220000
 8001e58:	10210000 	.word	0x10210000
 8001e5c:	10120000 	.word	0x10120000
 8001e60:	10110000 	.word	0x10110000
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40010800 	.word	0x40010800
 8001e70:	40010c00 	.word	0x40010c00
 8001e74:	40011000 	.word	0x40011000
 8001e78:	40011400 	.word	0x40011400
 8001e7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_GPIO_Init+0x304>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	4909      	ldr	r1, [pc, #36]	@ (8001eb0 <HAL_GPIO_Init+0x304>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	3301      	adds	r3, #1
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f47f ae8e 	bne.w	8001bc0 <HAL_GPIO_Init+0x14>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	372c      	adds	r7, #44	@ 0x2c
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ed0:	e003      	b.n	8001eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	041a      	lsls	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	611a      	str	r2, [r3, #16]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e272      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8087 	beq.w	8002012 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f04:	4b92      	ldr	r3, [pc, #584]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d00c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f10:	4b8f      	ldr	r3, [pc, #572]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d112      	bne.n	8001f42 <HAL_RCC_OscConfig+0x5e>
 8001f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f28:	d10b      	bne.n	8001f42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2a:	4b89      	ldr	r3, [pc, #548]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d06c      	beq.n	8002010 <HAL_RCC_OscConfig+0x12c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d168      	bne.n	8002010 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e24c      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x76>
 8001f4c:	4b80      	ldr	r3, [pc, #512]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a7f      	ldr	r2, [pc, #508]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e02e      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x98>
 8001f62:	4b7b      	ldr	r3, [pc, #492]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7a      	ldr	r2, [pc, #488]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b78      	ldr	r3, [pc, #480]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a77      	ldr	r2, [pc, #476]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01d      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xbc>
 8001f86:	4b72      	ldr	r3, [pc, #456]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a71      	ldr	r2, [pc, #452]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b6f      	ldr	r3, [pc, #444]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6e      	ldr	r2, [pc, #440]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001fa0:	4b6b      	ldr	r3, [pc, #428]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6a      	ldr	r2, [pc, #424]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b68      	ldr	r3, [pc, #416]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a67      	ldr	r2, [pc, #412]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f8b6 	bl	8001130 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff f8b2 	bl	8001130 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	@ 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e200      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b5d      	ldr	r3, [pc, #372]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xe4>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f8a2 	bl	8001130 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff f89e 	bl	8001130 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	@ 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1ec      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	4b53      	ldr	r3, [pc, #332]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x10c>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d063      	beq.n	80020e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201e:	4b4c      	ldr	r3, [pc, #304]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800202a:	4b49      	ldr	r3, [pc, #292]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b08      	cmp	r3, #8
 8002034:	d11c      	bne.n	8002070 <HAL_RCC_OscConfig+0x18c>
 8002036:	4b46      	ldr	r3, [pc, #280]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	4b43      	ldr	r3, [pc, #268]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x176>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1c0      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b3d      	ldr	r3, [pc, #244]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4939      	ldr	r1, [pc, #228]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e03a      	b.n	80020e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	4b36      	ldr	r3, [pc, #216]	@ (8002154 <HAL_RCC_OscConfig+0x270>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7ff f857 	bl	8001130 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002086:	f7ff f853 	bl	8001130 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1a1      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	4b2d      	ldr	r3, [pc, #180]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4927      	ldr	r1, [pc, #156]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
 80020b8:	e015      	b.n	80020e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ba:	4b26      	ldr	r3, [pc, #152]	@ (8002154 <HAL_RCC_OscConfig+0x270>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7ff f836 	bl	8001130 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c8:	f7ff f832 	bl	8001130 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e180      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d03a      	beq.n	8002168 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d019      	beq.n	800212e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fa:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <HAL_RCC_OscConfig+0x274>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7ff f816 	bl	8001130 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002108:	f7ff f812 	bl	8001130 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e160      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <HAL_RCC_OscConfig+0x26c>)
 800211c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002126:	2001      	movs	r0, #1
 8002128:	f000 faba 	bl	80026a0 <RCC_Delay>
 800212c:	e01c      	b.n	8002168 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212e:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <HAL_RCC_OscConfig+0x274>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7fe fffc 	bl	8001130 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213a:	e00f      	b.n	800215c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213c:	f7fe fff8 	bl	8001130 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d908      	bls.n	800215c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e146      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	42420000 	.word	0x42420000
 8002158:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	4b92      	ldr	r3, [pc, #584]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e9      	bne.n	800213c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a6 	beq.w	80022c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217a:	4b8b      	ldr	r3, [pc, #556]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10d      	bne.n	80021a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4b88      	ldr	r3, [pc, #544]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a87      	ldr	r2, [pc, #540]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002190:	61d3      	str	r3, [r2, #28]
 8002192:	4b85      	ldr	r3, [pc, #532]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219e:	2301      	movs	r3, #1
 80021a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a2:	4b82      	ldr	r3, [pc, #520]	@ (80023ac <HAL_RCC_OscConfig+0x4c8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ae:	4b7f      	ldr	r3, [pc, #508]	@ (80023ac <HAL_RCC_OscConfig+0x4c8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a7e      	ldr	r2, [pc, #504]	@ (80023ac <HAL_RCC_OscConfig+0x4c8>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ba:	f7fe ffb9 	bl	8001130 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c2:	f7fe ffb5 	bl	8001130 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b64      	cmp	r3, #100	@ 0x64
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e103      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	4b75      	ldr	r3, [pc, #468]	@ (80023ac <HAL_RCC_OscConfig+0x4c8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x312>
 80021e8:	4b6f      	ldr	r3, [pc, #444]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4a6e      	ldr	r2, [pc, #440]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6213      	str	r3, [r2, #32]
 80021f4:	e02d      	b.n	8002252 <HAL_RCC_OscConfig+0x36e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x334>
 80021fe:	4b6a      	ldr	r3, [pc, #424]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a69      	ldr	r2, [pc, #420]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6213      	str	r3, [r2, #32]
 800220a:	4b67      	ldr	r3, [pc, #412]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4a66      	ldr	r2, [pc, #408]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	6213      	str	r3, [r2, #32]
 8002216:	e01c      	b.n	8002252 <HAL_RCC_OscConfig+0x36e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b05      	cmp	r3, #5
 800221e:	d10c      	bne.n	800223a <HAL_RCC_OscConfig+0x356>
 8002220:	4b61      	ldr	r3, [pc, #388]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4a60      	ldr	r2, [pc, #384]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	4b5e      	ldr	r3, [pc, #376]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4a5d      	ldr	r2, [pc, #372]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6213      	str	r3, [r2, #32]
 8002238:	e00b      	b.n	8002252 <HAL_RCC_OscConfig+0x36e>
 800223a:	4b5b      	ldr	r3, [pc, #364]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a5a      	ldr	r2, [pc, #360]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	4b58      	ldr	r3, [pc, #352]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a57      	ldr	r2, [pc, #348]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d015      	beq.n	8002286 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7fe ff69 	bl	8001130 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe ff65 	bl	8001130 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0b1      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002278:	4b4b      	ldr	r3, [pc, #300]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ee      	beq.n	8002262 <HAL_RCC_OscConfig+0x37e>
 8002284:	e014      	b.n	80022b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7fe ff53 	bl	8001130 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7fe ff4f 	bl	8001130 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e09b      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a4:	4b40      	ldr	r3, [pc, #256]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1ee      	bne.n	800228e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b6:	4b3c      	ldr	r3, [pc, #240]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4a3b      	ldr	r2, [pc, #236]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8087 	beq.w	80023da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022cc:	4b36      	ldr	r3, [pc, #216]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d061      	beq.n	800239c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d146      	bne.n	800236e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e0:	4b33      	ldr	r3, [pc, #204]	@ (80023b0 <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe ff23 	bl	8001130 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe ff1f 	bl	8001130 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e06d      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	4b29      	ldr	r3, [pc, #164]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002314:	d108      	bne.n	8002328 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002316:	4b24      	ldr	r3, [pc, #144]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	4921      	ldr	r1, [pc, #132]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002328:	4b1f      	ldr	r3, [pc, #124]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a19      	ldr	r1, [r3, #32]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	430b      	orrs	r3, r1
 800233a:	491b      	ldr	r1, [pc, #108]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002340:	4b1b      	ldr	r3, [pc, #108]	@ (80023b0 <HAL_RCC_OscConfig+0x4cc>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7fe fef3 	bl	8001130 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234e:	f7fe feef 	bl	8001130 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e03d      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002360:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x46a>
 800236c:	e035      	b.n	80023da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <HAL_RCC_OscConfig+0x4cc>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fe fedc 	bl	8001130 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7fe fed8 	bl	8001130 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e026      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x498>
 800239a:	e01e      	b.n	80023da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e019      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
 80023b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023b4:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <HAL_RCC_OscConfig+0x500>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d106      	bne.n	80023d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000

080023e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0d0      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b6a      	ldr	r3, [pc, #424]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d910      	bls.n	800242c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b67      	ldr	r3, [pc, #412]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 0207 	bic.w	r2, r3, #7
 8002412:	4965      	ldr	r1, [pc, #404]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b63      	ldr	r3, [pc, #396]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0b8      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b59      	ldr	r3, [pc, #356]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a58      	ldr	r2, [pc, #352]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800244e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800245c:	4b53      	ldr	r3, [pc, #332]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a52      	ldr	r2, [pc, #328]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002466:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b50      	ldr	r3, [pc, #320]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	494d      	ldr	r1, [pc, #308]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d040      	beq.n	8002508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b47      	ldr	r3, [pc, #284]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e07f      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	4b41      	ldr	r3, [pc, #260]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e073      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	4b3d      	ldr	r3, [pc, #244]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06b      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b39      	ldr	r3, [pc, #228]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4936      	ldr	r1, [pc, #216]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fe2a 	bl	8001130 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe fe26 	bl	8001130 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e053      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b2d      	ldr	r3, [pc, #180]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002508:	4b27      	ldr	r3, [pc, #156]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d210      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 0207 	bic.w	r2, r3, #7
 800251e:	4922      	ldr	r1, [pc, #136]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b20      	ldr	r3, [pc, #128]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e032      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4916      	ldr	r1, [pc, #88]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002562:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	490e      	ldr	r1, [pc, #56]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002576:	f000 f821 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800257a:	4602      	mov	r2, r0
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	490a      	ldr	r1, [pc, #40]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002588:	5ccb      	ldrb	r3, [r1, r3]
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	4a09      	ldr	r2, [pc, #36]	@ (80025b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002592:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fd88 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40022000 	.word	0x40022000
 80025ac:	40021000 	.word	0x40021000
 80025b0:	08003f0c 	.word	0x08003f0c
 80025b4:	20000020 	.word	0x20000020
 80025b8:	20000024 	.word	0x20000024

080025bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x94>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d002      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x30>
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x36>
 80025ea:	e027      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025ec:	4b19      	ldr	r3, [pc, #100]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ee:	613b      	str	r3, [r7, #16]
      break;
 80025f0:	e027      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	0c9b      	lsrs	r3, r3, #18
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	4a17      	ldr	r2, [pc, #92]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025fc:	5cd3      	ldrb	r3, [r2, r3]
 80025fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d010      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800260a:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x94>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	0c5b      	lsrs	r3, r3, #17
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	4a11      	ldr	r2, [pc, #68]	@ (800265c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a0d      	ldr	r2, [pc, #52]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x98>)
 800261e:	fb03 f202 	mul.w	r2, r3, r2
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	e004      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a0c      	ldr	r2, [pc, #48]	@ (8002660 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	613b      	str	r3, [r7, #16]
      break;
 800263a:	e002      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800263c:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x98>)
 800263e:	613b      	str	r3, [r7, #16]
      break;
 8002640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002642:	693b      	ldr	r3, [r7, #16]
}
 8002644:	4618      	mov	r0, r3
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	007a1200 	.word	0x007a1200
 8002658:	08003f24 	.word	0x08003f24
 800265c:	08003f34 	.word	0x08003f34
 8002660:	003d0900 	.word	0x003d0900

08002664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002668:	4b02      	ldr	r3, [pc, #8]	@ (8002674 <HAL_RCC_GetHCLKFreq+0x10>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	20000020 	.word	0x20000020

08002678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800267c:	f7ff fff2 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	0adb      	lsrs	r3, r3, #11
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	4903      	ldr	r1, [pc, #12]	@ (800269c <HAL_RCC_GetPCLK2Freq+0x24>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002694:	4618      	mov	r0, r3
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	08003f1c 	.word	0x08003f1c

080026a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026a8:	4b0a      	ldr	r3, [pc, #40]	@ (80026d4 <RCC_Delay+0x34>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0a      	ldr	r2, [pc, #40]	@ (80026d8 <RCC_Delay+0x38>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0a5b      	lsrs	r3, r3, #9
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026bc:	bf00      	nop
  }
  while (Delay --);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1e5a      	subs	r2, r3, #1
 80026c2:	60fa      	str	r2, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f9      	bne.n	80026bc <RCC_Delay+0x1c>
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	20000020 	.word	0x20000020
 80026d8:	10624dd3 	.word	0x10624dd3

080026dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d07d      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80026f8:	2300      	movs	r3, #0
 80026fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fc:	4b4f      	ldr	r3, [pc, #316]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10d      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002708:	4b4c      	ldr	r3, [pc, #304]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	4a4b      	ldr	r2, [pc, #300]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002712:	61d3      	str	r3, [r2, #28]
 8002714:	4b49      	ldr	r3, [pc, #292]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002720:	2301      	movs	r3, #1
 8002722:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	4b46      	ldr	r3, [pc, #280]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d118      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002730:	4b43      	ldr	r3, [pc, #268]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a42      	ldr	r2, [pc, #264]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800273a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273c:	f7fe fcf8 	bl	8001130 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	e008      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002744:	f7fe fcf4 	bl	8001130 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e06d      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b3a      	ldr	r3, [pc, #232]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002762:	4b36      	ldr	r3, [pc, #216]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800276a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d02e      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	429a      	cmp	r2, r3
 800277e:	d027      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002780:	4b2e      	ldr	r3, [pc, #184]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002788:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800278a:	4b2e      	ldr	r3, [pc, #184]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002790:	4b2c      	ldr	r3, [pc, #176]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002796:	4a29      	ldr	r2, [pc, #164]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d014      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7fe fcc3 	bl	8001130 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe fcbf 	bl	8001130 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e036      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c4:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ee      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027d0:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4917      	ldr	r1, [pc, #92]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d105      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e8:	4b14      	ldr	r3, [pc, #80]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	4a13      	ldr	r2, [pc, #76]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002800:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	490b      	ldr	r1, [pc, #44]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800281e:	4b07      	ldr	r3, [pc, #28]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	4904      	ldr	r1, [pc, #16]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	40007000 	.word	0x40007000
 8002844:	42420440 	.word	0x42420440

08002848 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	2300      	movs	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b10      	cmp	r3, #16
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b10      	cmp	r3, #16
 800286e:	f200 808a 	bhi.w	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d045      	beq.n	8002904 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d075      	beq.n	800296a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800287e:	e082      	b.n	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002880:	4b46      	ldr	r3, [pc, #280]	@ (800299c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002886:	4b45      	ldr	r3, [pc, #276]	@ (800299c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d07b      	beq.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	0c9b      	lsrs	r3, r3, #18
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	4a41      	ldr	r2, [pc, #260]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d015      	beq.n	80028d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028aa:	4b3c      	ldr	r3, [pc, #240]	@ (800299c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	0c5b      	lsrs	r3, r3, #17
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	4a3b      	ldr	r2, [pc, #236]	@ (80029a4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80028b6:	5cd3      	ldrb	r3, [r2, r3]
 80028b8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00d      	beq.n	80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80028c4:	4a38      	ldr	r2, [pc, #224]	@ (80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	e004      	b.n	80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4a34      	ldr	r2, [pc, #208]	@ (80029ac <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80028e0:	4b2e      	ldr	r3, [pc, #184]	@ (800299c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028ec:	d102      	bne.n	80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	61bb      	str	r3, [r7, #24]
      break;
 80028f2:	e04a      	b.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4a2d      	ldr	r2, [pc, #180]	@ (80029b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	61bb      	str	r3, [r7, #24]
      break;
 8002902:	e042      	b.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002904:	4b25      	ldr	r3, [pc, #148]	@ (800299c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002914:	d108      	bne.n	8002928 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002920:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	e01f      	b.n	8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800292e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002932:	d109      	bne.n	8002948 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002934:	4b19      	ldr	r3, [pc, #100]	@ (800299c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002940:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	e00f      	b.n	8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800294e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002952:	d11c      	bne.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d016      	beq.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002960:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002964:	61bb      	str	r3, [r7, #24]
      break;
 8002966:	e012      	b.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002968:	e011      	b.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800296a:	f7ff fe85 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	0b9b      	lsrs	r3, r3, #14
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	3301      	adds	r3, #1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	61bb      	str	r3, [r7, #24]
      break;
 8002984:	e004      	b.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002986:	bf00      	nop
 8002988:	e002      	b.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800298a:	bf00      	nop
 800298c:	e000      	b.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800298e:	bf00      	nop
    }
  }
  return (frequency);
 8002990:	69bb      	ldr	r3, [r7, #24]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	08003f38 	.word	0x08003f38
 80029a4:	08003f48 	.word	0x08003f48
 80029a8:	007a1200 	.word	0x007a1200
 80029ac:	003d0900 	.word	0x003d0900
 80029b0:	aaaaaaab 	.word	0xaaaaaaab

080029b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e041      	b.n	8002a4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe f81c 	bl	8000a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f000 fab2 	bl	8002f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e041      	b.n	8002ae8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d106      	bne.n	8002a7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f839 	bl	8002af0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4610      	mov	r0, r2
 8002a92:	f000 fa63 	bl	8002f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_TIM_PWM_Start+0x24>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e022      	b.n	8002b6e <HAL_TIM_PWM_Start+0x6a>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d109      	bne.n	8002b42 <HAL_TIM_PWM_Start+0x3e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	e015      	b.n	8002b6e <HAL_TIM_PWM_Start+0x6a>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d109      	bne.n	8002b5c <HAL_TIM_PWM_Start+0x58>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	e008      	b.n	8002b6e <HAL_TIM_PWM_Start+0x6a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e05e      	b.n	8002c34 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d104      	bne.n	8002b86 <HAL_TIM_PWM_Start+0x82>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b84:	e013      	b.n	8002bae <HAL_TIM_PWM_Start+0xaa>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d104      	bne.n	8002b96 <HAL_TIM_PWM_Start+0x92>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b94:	e00b      	b.n	8002bae <HAL_TIM_PWM_Start+0xaa>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d104      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0xa2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ba4:	e003      	b.n	8002bae <HAL_TIM_PWM_Start+0xaa>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	6839      	ldr	r1, [r7, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fc5c 	bl	8003474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8002c3c <HAL_TIM_PWM_Start+0x138>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d107      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a18      	ldr	r2, [pc, #96]	@ (8002c3c <HAL_TIM_PWM_Start+0x138>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00e      	beq.n	8002bfe <HAL_TIM_PWM_Start+0xfa>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be8:	d009      	beq.n	8002bfe <HAL_TIM_PWM_Start+0xfa>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a14      	ldr	r2, [pc, #80]	@ (8002c40 <HAL_TIM_PWM_Start+0x13c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d004      	beq.n	8002bfe <HAL_TIM_PWM_Start+0xfa>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a12      	ldr	r2, [pc, #72]	@ (8002c44 <HAL_TIM_PWM_Start+0x140>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d111      	bne.n	8002c22 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b06      	cmp	r3, #6
 8002c0e:	d010      	beq.n	8002c32 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c20:	e007      	b.n	8002c32 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0201 	orr.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40012c00 	.word	0x40012c00
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40000800 	.word	0x40000800

08002c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0ae      	b.n	8002dc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	f200 809f 	bhi.w	8002db4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c76:	a201      	add	r2, pc, #4	@ (adr r2, 8002c7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7c:	08002cb1 	.word	0x08002cb1
 8002c80:	08002db5 	.word	0x08002db5
 8002c84:	08002db5 	.word	0x08002db5
 8002c88:	08002db5 	.word	0x08002db5
 8002c8c:	08002cf1 	.word	0x08002cf1
 8002c90:	08002db5 	.word	0x08002db5
 8002c94:	08002db5 	.word	0x08002db5
 8002c98:	08002db5 	.word	0x08002db5
 8002c9c:	08002d33 	.word	0x08002d33
 8002ca0:	08002db5 	.word	0x08002db5
 8002ca4:	08002db5 	.word	0x08002db5
 8002ca8:	08002db5 	.word	0x08002db5
 8002cac:	08002d73 	.word	0x08002d73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f9be 	bl	8003038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0208 	orr.w	r2, r2, #8
 8002cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0204 	bic.w	r2, r2, #4
 8002cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6999      	ldr	r1, [r3, #24]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	619a      	str	r2, [r3, #24]
      break;
 8002cee:	e064      	b.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fa04 	bl	8003104 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6999      	ldr	r1, [r3, #24]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	021a      	lsls	r2, r3, #8
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	619a      	str	r2, [r3, #24]
      break;
 8002d30:	e043      	b.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fa4d 	bl	80031d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0208 	orr.w	r2, r2, #8
 8002d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0204 	bic.w	r2, r2, #4
 8002d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69d9      	ldr	r1, [r3, #28]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	61da      	str	r2, [r3, #28]
      break;
 8002d70:	e023      	b.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fa97 	bl	80032ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69d9      	ldr	r1, [r3, #28]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	021a      	lsls	r2, r3, #8
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	61da      	str	r2, [r3, #28]
      break;
 8002db2:	e002      	b.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	75fb      	strb	r3, [r7, #23]
      break;
 8002db8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_TIM_ConfigClockSource+0x1c>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e0b4      	b.n	8002f52 <HAL_TIM_ConfigClockSource+0x186>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e20:	d03e      	beq.n	8002ea0 <HAL_TIM_ConfigClockSource+0xd4>
 8002e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e26:	f200 8087 	bhi.w	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e2e:	f000 8086 	beq.w	8002f3e <HAL_TIM_ConfigClockSource+0x172>
 8002e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e36:	d87f      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e38:	2b70      	cmp	r3, #112	@ 0x70
 8002e3a:	d01a      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0xa6>
 8002e3c:	2b70      	cmp	r3, #112	@ 0x70
 8002e3e:	d87b      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	2b60      	cmp	r3, #96	@ 0x60
 8002e42:	d050      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x11a>
 8002e44:	2b60      	cmp	r3, #96	@ 0x60
 8002e46:	d877      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e48:	2b50      	cmp	r3, #80	@ 0x50
 8002e4a:	d03c      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0xfa>
 8002e4c:	2b50      	cmp	r3, #80	@ 0x50
 8002e4e:	d873      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e50:	2b40      	cmp	r3, #64	@ 0x40
 8002e52:	d058      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x13a>
 8002e54:	2b40      	cmp	r3, #64	@ 0x40
 8002e56:	d86f      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e58:	2b30      	cmp	r3, #48	@ 0x30
 8002e5a:	d064      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x15a>
 8002e5c:	2b30      	cmp	r3, #48	@ 0x30
 8002e5e:	d86b      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d060      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x15a>
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d867      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d05c      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x15a>
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d05a      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x15a>
 8002e70:	e062      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e82:	f000 fad8 	bl	8003436 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	609a      	str	r2, [r3, #8]
      break;
 8002e9e:	e04f      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eb0:	f000 fac1 	bl	8003436 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ec2:	609a      	str	r2, [r3, #8]
      break;
 8002ec4:	e03c      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f000 fa38 	bl	8003348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2150      	movs	r1, #80	@ 0x50
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fa8f 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 8002ee4:	e02c      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f000 fa56 	bl	80033a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2160      	movs	r1, #96	@ 0x60
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fa7f 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 8002f04:	e01c      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f12:	461a      	mov	r2, r3
 8002f14:	f000 fa18 	bl	8003348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2140      	movs	r1, #64	@ 0x40
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fa6f 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 8002f24:	e00c      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f000 fa66 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 8002f36:	e003      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3c:	e000      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800302c <TIM_Base_SetConfig+0xd0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00b      	beq.n	8002f8c <TIM_Base_SetConfig+0x30>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f7a:	d007      	beq.n	8002f8c <TIM_Base_SetConfig+0x30>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003030 <TIM_Base_SetConfig+0xd4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <TIM_Base_SetConfig+0x30>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a2b      	ldr	r2, [pc, #172]	@ (8003034 <TIM_Base_SetConfig+0xd8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d108      	bne.n	8002f9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a22      	ldr	r2, [pc, #136]	@ (800302c <TIM_Base_SetConfig+0xd0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00b      	beq.n	8002fbe <TIM_Base_SetConfig+0x62>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fac:	d007      	beq.n	8002fbe <TIM_Base_SetConfig+0x62>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8003030 <TIM_Base_SetConfig+0xd4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d003      	beq.n	8002fbe <TIM_Base_SetConfig+0x62>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8003034 <TIM_Base_SetConfig+0xd8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d108      	bne.n	8002fd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a0d      	ldr	r2, [pc, #52]	@ (800302c <TIM_Base_SetConfig+0xd0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d103      	bne.n	8003004 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f023 0201 	bic.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	611a      	str	r2, [r3, #16]
  }
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40000400 	.word	0x40000400
 8003034:	40000800 	.word	0x40000800

08003038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f023 0201 	bic.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0303 	bic.w	r3, r3, #3
 800306e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f023 0302 	bic.w	r3, r3, #2
 8003080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a1c      	ldr	r2, [pc, #112]	@ (8003100 <TIM_OC1_SetConfig+0xc8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10c      	bne.n	80030ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f023 0308 	bic.w	r3, r3, #8
 800309a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f023 0304 	bic.w	r3, r3, #4
 80030ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a13      	ldr	r2, [pc, #76]	@ (8003100 <TIM_OC1_SetConfig+0xc8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d111      	bne.n	80030da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	621a      	str	r2, [r3, #32]
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40012c00 	.word	0x40012c00

08003104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f023 0210 	bic.w	r2, r3, #16
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800313a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0320 	bic.w	r3, r3, #32
 800314e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a1d      	ldr	r2, [pc, #116]	@ (80031d4 <TIM_OC2_SetConfig+0xd0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d10d      	bne.n	8003180 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800316a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800317e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a14      	ldr	r2, [pc, #80]	@ (80031d4 <TIM_OC2_SetConfig+0xd0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d113      	bne.n	80031b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800318e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	621a      	str	r2, [r3, #32]
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	40012c00 	.word	0x40012c00

080031d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a1d      	ldr	r2, [pc, #116]	@ (80032a8 <TIM_OC3_SetConfig+0xd0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10d      	bne.n	8003252 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800323c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a14      	ldr	r2, [pc, #80]	@ (80032a8 <TIM_OC3_SetConfig+0xd0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d113      	bne.n	8003282 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	621a      	str	r2, [r3, #32]
}
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40012c00 	.word	0x40012c00

080032ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	031b      	lsls	r3, r3, #12
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a0f      	ldr	r2, [pc, #60]	@ (8003344 <TIM_OC4_SetConfig+0x98>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d109      	bne.n	8003320 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00

08003348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f023 0201 	bic.w	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f023 030a 	bic.w	r3, r3, #10
 8003384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f023 0210 	bic.w	r2, r3, #16
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	031b      	lsls	r3, r3, #12
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	621a      	str	r2, [r3, #32]
}
 80033f8:	bf00      	nop
 80033fa:	371c      	adds	r7, #28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	f043 0307 	orr.w	r3, r3, #7
 8003424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	609a      	str	r2, [r3, #8]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003436:	b480      	push	{r7}
 8003438:	b087      	sub	sp, #28
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003450:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	021a      	lsls	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	431a      	orrs	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4313      	orrs	r3, r2
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	609a      	str	r2, [r3, #8]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	2201      	movs	r2, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a1a      	ldr	r2, [r3, #32]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	43db      	mvns	r3, r3
 8003496:	401a      	ands	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1a      	ldr	r2, [r3, #32]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	431a      	orrs	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e046      	b.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a16      	ldr	r2, [pc, #88]	@ (800356c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00e      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003520:	d009      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a12      	ldr	r2, [pc, #72]	@ (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a10      	ldr	r2, [pc, #64]	@ (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10c      	bne.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800353c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	4313      	orrs	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800

08003578 <siprintf>:
 8003578:	b40e      	push	{r1, r2, r3}
 800357a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800357e:	b500      	push	{lr}
 8003580:	b09c      	sub	sp, #112	@ 0x70
 8003582:	ab1d      	add	r3, sp, #116	@ 0x74
 8003584:	9002      	str	r0, [sp, #8]
 8003586:	9006      	str	r0, [sp, #24]
 8003588:	9107      	str	r1, [sp, #28]
 800358a:	9104      	str	r1, [sp, #16]
 800358c:	4808      	ldr	r0, [pc, #32]	@ (80035b0 <siprintf+0x38>)
 800358e:	4909      	ldr	r1, [pc, #36]	@ (80035b4 <siprintf+0x3c>)
 8003590:	f853 2b04 	ldr.w	r2, [r3], #4
 8003594:	9105      	str	r1, [sp, #20]
 8003596:	6800      	ldr	r0, [r0, #0]
 8003598:	a902      	add	r1, sp, #8
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	f000 f992 	bl	80038c4 <_svfiprintf_r>
 80035a0:	2200      	movs	r2, #0
 80035a2:	9b02      	ldr	r3, [sp, #8]
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	b01c      	add	sp, #112	@ 0x70
 80035a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035ac:	b003      	add	sp, #12
 80035ae:	4770      	bx	lr
 80035b0:	2000002c 	.word	0x2000002c
 80035b4:	ffff0208 	.word	0xffff0208

080035b8 <memset>:
 80035b8:	4603      	mov	r3, r0
 80035ba:	4402      	add	r2, r0
 80035bc:	4293      	cmp	r3, r2
 80035be:	d100      	bne.n	80035c2 <memset+0xa>
 80035c0:	4770      	bx	lr
 80035c2:	f803 1b01 	strb.w	r1, [r3], #1
 80035c6:	e7f9      	b.n	80035bc <memset+0x4>

080035c8 <__errno>:
 80035c8:	4b01      	ldr	r3, [pc, #4]	@ (80035d0 <__errno+0x8>)
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	2000002c 	.word	0x2000002c

080035d4 <__libc_init_array>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	2600      	movs	r6, #0
 80035d8:	4d0c      	ldr	r5, [pc, #48]	@ (800360c <__libc_init_array+0x38>)
 80035da:	4c0d      	ldr	r4, [pc, #52]	@ (8003610 <__libc_init_array+0x3c>)
 80035dc:	1b64      	subs	r4, r4, r5
 80035de:	10a4      	asrs	r4, r4, #2
 80035e0:	42a6      	cmp	r6, r4
 80035e2:	d109      	bne.n	80035f8 <__libc_init_array+0x24>
 80035e4:	f000 fc78 	bl	8003ed8 <_init>
 80035e8:	2600      	movs	r6, #0
 80035ea:	4d0a      	ldr	r5, [pc, #40]	@ (8003614 <__libc_init_array+0x40>)
 80035ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003618 <__libc_init_array+0x44>)
 80035ee:	1b64      	subs	r4, r4, r5
 80035f0:	10a4      	asrs	r4, r4, #2
 80035f2:	42a6      	cmp	r6, r4
 80035f4:	d105      	bne.n	8003602 <__libc_init_array+0x2e>
 80035f6:	bd70      	pop	{r4, r5, r6, pc}
 80035f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fc:	4798      	blx	r3
 80035fe:	3601      	adds	r6, #1
 8003600:	e7ee      	b.n	80035e0 <__libc_init_array+0xc>
 8003602:	f855 3b04 	ldr.w	r3, [r5], #4
 8003606:	4798      	blx	r3
 8003608:	3601      	adds	r6, #1
 800360a:	e7f2      	b.n	80035f2 <__libc_init_array+0x1e>
 800360c:	08003f80 	.word	0x08003f80
 8003610:	08003f80 	.word	0x08003f80
 8003614:	08003f80 	.word	0x08003f80
 8003618:	08003f84 	.word	0x08003f84

0800361c <__retarget_lock_acquire_recursive>:
 800361c:	4770      	bx	lr

0800361e <__retarget_lock_release_recursive>:
 800361e:	4770      	bx	lr

08003620 <_free_r>:
 8003620:	b538      	push	{r3, r4, r5, lr}
 8003622:	4605      	mov	r5, r0
 8003624:	2900      	cmp	r1, #0
 8003626:	d040      	beq.n	80036aa <_free_r+0x8a>
 8003628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800362c:	1f0c      	subs	r4, r1, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	bfb8      	it	lt
 8003632:	18e4      	addlt	r4, r4, r3
 8003634:	f000 f8de 	bl	80037f4 <__malloc_lock>
 8003638:	4a1c      	ldr	r2, [pc, #112]	@ (80036ac <_free_r+0x8c>)
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	b933      	cbnz	r3, 800364c <_free_r+0x2c>
 800363e:	6063      	str	r3, [r4, #4]
 8003640:	6014      	str	r4, [r2, #0]
 8003642:	4628      	mov	r0, r5
 8003644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003648:	f000 b8da 	b.w	8003800 <__malloc_unlock>
 800364c:	42a3      	cmp	r3, r4
 800364e:	d908      	bls.n	8003662 <_free_r+0x42>
 8003650:	6820      	ldr	r0, [r4, #0]
 8003652:	1821      	adds	r1, r4, r0
 8003654:	428b      	cmp	r3, r1
 8003656:	bf01      	itttt	eq
 8003658:	6819      	ldreq	r1, [r3, #0]
 800365a:	685b      	ldreq	r3, [r3, #4]
 800365c:	1809      	addeq	r1, r1, r0
 800365e:	6021      	streq	r1, [r4, #0]
 8003660:	e7ed      	b.n	800363e <_free_r+0x1e>
 8003662:	461a      	mov	r2, r3
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	b10b      	cbz	r3, 800366c <_free_r+0x4c>
 8003668:	42a3      	cmp	r3, r4
 800366a:	d9fa      	bls.n	8003662 <_free_r+0x42>
 800366c:	6811      	ldr	r1, [r2, #0]
 800366e:	1850      	adds	r0, r2, r1
 8003670:	42a0      	cmp	r0, r4
 8003672:	d10b      	bne.n	800368c <_free_r+0x6c>
 8003674:	6820      	ldr	r0, [r4, #0]
 8003676:	4401      	add	r1, r0
 8003678:	1850      	adds	r0, r2, r1
 800367a:	4283      	cmp	r3, r0
 800367c:	6011      	str	r1, [r2, #0]
 800367e:	d1e0      	bne.n	8003642 <_free_r+0x22>
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4408      	add	r0, r1
 8003686:	6010      	str	r0, [r2, #0]
 8003688:	6053      	str	r3, [r2, #4]
 800368a:	e7da      	b.n	8003642 <_free_r+0x22>
 800368c:	d902      	bls.n	8003694 <_free_r+0x74>
 800368e:	230c      	movs	r3, #12
 8003690:	602b      	str	r3, [r5, #0]
 8003692:	e7d6      	b.n	8003642 <_free_r+0x22>
 8003694:	6820      	ldr	r0, [r4, #0]
 8003696:	1821      	adds	r1, r4, r0
 8003698:	428b      	cmp	r3, r1
 800369a:	bf01      	itttt	eq
 800369c:	6819      	ldreq	r1, [r3, #0]
 800369e:	685b      	ldreq	r3, [r3, #4]
 80036a0:	1809      	addeq	r1, r1, r0
 80036a2:	6021      	streq	r1, [r4, #0]
 80036a4:	6063      	str	r3, [r4, #4]
 80036a6:	6054      	str	r4, [r2, #4]
 80036a8:	e7cb      	b.n	8003642 <_free_r+0x22>
 80036aa:	bd38      	pop	{r3, r4, r5, pc}
 80036ac:	20000284 	.word	0x20000284

080036b0 <sbrk_aligned>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	4e0f      	ldr	r6, [pc, #60]	@ (80036f0 <sbrk_aligned+0x40>)
 80036b4:	460c      	mov	r4, r1
 80036b6:	6831      	ldr	r1, [r6, #0]
 80036b8:	4605      	mov	r5, r0
 80036ba:	b911      	cbnz	r1, 80036c2 <sbrk_aligned+0x12>
 80036bc:	f000 fbaa 	bl	8003e14 <_sbrk_r>
 80036c0:	6030      	str	r0, [r6, #0]
 80036c2:	4621      	mov	r1, r4
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 fba5 	bl	8003e14 <_sbrk_r>
 80036ca:	1c43      	adds	r3, r0, #1
 80036cc:	d103      	bne.n	80036d6 <sbrk_aligned+0x26>
 80036ce:	f04f 34ff 	mov.w	r4, #4294967295
 80036d2:	4620      	mov	r0, r4
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
 80036d6:	1cc4      	adds	r4, r0, #3
 80036d8:	f024 0403 	bic.w	r4, r4, #3
 80036dc:	42a0      	cmp	r0, r4
 80036de:	d0f8      	beq.n	80036d2 <sbrk_aligned+0x22>
 80036e0:	1a21      	subs	r1, r4, r0
 80036e2:	4628      	mov	r0, r5
 80036e4:	f000 fb96 	bl	8003e14 <_sbrk_r>
 80036e8:	3001      	adds	r0, #1
 80036ea:	d1f2      	bne.n	80036d2 <sbrk_aligned+0x22>
 80036ec:	e7ef      	b.n	80036ce <sbrk_aligned+0x1e>
 80036ee:	bf00      	nop
 80036f0:	20000280 	.word	0x20000280

080036f4 <_malloc_r>:
 80036f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f8:	1ccd      	adds	r5, r1, #3
 80036fa:	f025 0503 	bic.w	r5, r5, #3
 80036fe:	3508      	adds	r5, #8
 8003700:	2d0c      	cmp	r5, #12
 8003702:	bf38      	it	cc
 8003704:	250c      	movcc	r5, #12
 8003706:	2d00      	cmp	r5, #0
 8003708:	4606      	mov	r6, r0
 800370a:	db01      	blt.n	8003710 <_malloc_r+0x1c>
 800370c:	42a9      	cmp	r1, r5
 800370e:	d904      	bls.n	800371a <_malloc_r+0x26>
 8003710:	230c      	movs	r3, #12
 8003712:	6033      	str	r3, [r6, #0]
 8003714:	2000      	movs	r0, #0
 8003716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800371a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80037f0 <_malloc_r+0xfc>
 800371e:	f000 f869 	bl	80037f4 <__malloc_lock>
 8003722:	f8d8 3000 	ldr.w	r3, [r8]
 8003726:	461c      	mov	r4, r3
 8003728:	bb44      	cbnz	r4, 800377c <_malloc_r+0x88>
 800372a:	4629      	mov	r1, r5
 800372c:	4630      	mov	r0, r6
 800372e:	f7ff ffbf 	bl	80036b0 <sbrk_aligned>
 8003732:	1c43      	adds	r3, r0, #1
 8003734:	4604      	mov	r4, r0
 8003736:	d158      	bne.n	80037ea <_malloc_r+0xf6>
 8003738:	f8d8 4000 	ldr.w	r4, [r8]
 800373c:	4627      	mov	r7, r4
 800373e:	2f00      	cmp	r7, #0
 8003740:	d143      	bne.n	80037ca <_malloc_r+0xd6>
 8003742:	2c00      	cmp	r4, #0
 8003744:	d04b      	beq.n	80037de <_malloc_r+0xea>
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	4639      	mov	r1, r7
 800374a:	4630      	mov	r0, r6
 800374c:	eb04 0903 	add.w	r9, r4, r3
 8003750:	f000 fb60 	bl	8003e14 <_sbrk_r>
 8003754:	4581      	cmp	r9, r0
 8003756:	d142      	bne.n	80037de <_malloc_r+0xea>
 8003758:	6821      	ldr	r1, [r4, #0]
 800375a:	4630      	mov	r0, r6
 800375c:	1a6d      	subs	r5, r5, r1
 800375e:	4629      	mov	r1, r5
 8003760:	f7ff ffa6 	bl	80036b0 <sbrk_aligned>
 8003764:	3001      	adds	r0, #1
 8003766:	d03a      	beq.n	80037de <_malloc_r+0xea>
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	442b      	add	r3, r5
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	f8d8 3000 	ldr.w	r3, [r8]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	bb62      	cbnz	r2, 80037d0 <_malloc_r+0xdc>
 8003776:	f8c8 7000 	str.w	r7, [r8]
 800377a:	e00f      	b.n	800379c <_malloc_r+0xa8>
 800377c:	6822      	ldr	r2, [r4, #0]
 800377e:	1b52      	subs	r2, r2, r5
 8003780:	d420      	bmi.n	80037c4 <_malloc_r+0xd0>
 8003782:	2a0b      	cmp	r2, #11
 8003784:	d917      	bls.n	80037b6 <_malloc_r+0xc2>
 8003786:	1961      	adds	r1, r4, r5
 8003788:	42a3      	cmp	r3, r4
 800378a:	6025      	str	r5, [r4, #0]
 800378c:	bf18      	it	ne
 800378e:	6059      	strne	r1, [r3, #4]
 8003790:	6863      	ldr	r3, [r4, #4]
 8003792:	bf08      	it	eq
 8003794:	f8c8 1000 	streq.w	r1, [r8]
 8003798:	5162      	str	r2, [r4, r5]
 800379a:	604b      	str	r3, [r1, #4]
 800379c:	4630      	mov	r0, r6
 800379e:	f000 f82f 	bl	8003800 <__malloc_unlock>
 80037a2:	f104 000b 	add.w	r0, r4, #11
 80037a6:	1d23      	adds	r3, r4, #4
 80037a8:	f020 0007 	bic.w	r0, r0, #7
 80037ac:	1ac2      	subs	r2, r0, r3
 80037ae:	bf1c      	itt	ne
 80037b0:	1a1b      	subne	r3, r3, r0
 80037b2:	50a3      	strne	r3, [r4, r2]
 80037b4:	e7af      	b.n	8003716 <_malloc_r+0x22>
 80037b6:	6862      	ldr	r2, [r4, #4]
 80037b8:	42a3      	cmp	r3, r4
 80037ba:	bf0c      	ite	eq
 80037bc:	f8c8 2000 	streq.w	r2, [r8]
 80037c0:	605a      	strne	r2, [r3, #4]
 80037c2:	e7eb      	b.n	800379c <_malloc_r+0xa8>
 80037c4:	4623      	mov	r3, r4
 80037c6:	6864      	ldr	r4, [r4, #4]
 80037c8:	e7ae      	b.n	8003728 <_malloc_r+0x34>
 80037ca:	463c      	mov	r4, r7
 80037cc:	687f      	ldr	r7, [r7, #4]
 80037ce:	e7b6      	b.n	800373e <_malloc_r+0x4a>
 80037d0:	461a      	mov	r2, r3
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	42a3      	cmp	r3, r4
 80037d6:	d1fb      	bne.n	80037d0 <_malloc_r+0xdc>
 80037d8:	2300      	movs	r3, #0
 80037da:	6053      	str	r3, [r2, #4]
 80037dc:	e7de      	b.n	800379c <_malloc_r+0xa8>
 80037de:	230c      	movs	r3, #12
 80037e0:	4630      	mov	r0, r6
 80037e2:	6033      	str	r3, [r6, #0]
 80037e4:	f000 f80c 	bl	8003800 <__malloc_unlock>
 80037e8:	e794      	b.n	8003714 <_malloc_r+0x20>
 80037ea:	6005      	str	r5, [r0, #0]
 80037ec:	e7d6      	b.n	800379c <_malloc_r+0xa8>
 80037ee:	bf00      	nop
 80037f0:	20000284 	.word	0x20000284

080037f4 <__malloc_lock>:
 80037f4:	4801      	ldr	r0, [pc, #4]	@ (80037fc <__malloc_lock+0x8>)
 80037f6:	f7ff bf11 	b.w	800361c <__retarget_lock_acquire_recursive>
 80037fa:	bf00      	nop
 80037fc:	2000027c 	.word	0x2000027c

08003800 <__malloc_unlock>:
 8003800:	4801      	ldr	r0, [pc, #4]	@ (8003808 <__malloc_unlock+0x8>)
 8003802:	f7ff bf0c 	b.w	800361e <__retarget_lock_release_recursive>
 8003806:	bf00      	nop
 8003808:	2000027c 	.word	0x2000027c

0800380c <__ssputs_r>:
 800380c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003810:	461f      	mov	r7, r3
 8003812:	688e      	ldr	r6, [r1, #8]
 8003814:	4682      	mov	sl, r0
 8003816:	42be      	cmp	r6, r7
 8003818:	460c      	mov	r4, r1
 800381a:	4690      	mov	r8, r2
 800381c:	680b      	ldr	r3, [r1, #0]
 800381e:	d82d      	bhi.n	800387c <__ssputs_r+0x70>
 8003820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003824:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003828:	d026      	beq.n	8003878 <__ssputs_r+0x6c>
 800382a:	6965      	ldr	r5, [r4, #20]
 800382c:	6909      	ldr	r1, [r1, #16]
 800382e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003832:	eba3 0901 	sub.w	r9, r3, r1
 8003836:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800383a:	1c7b      	adds	r3, r7, #1
 800383c:	444b      	add	r3, r9
 800383e:	106d      	asrs	r5, r5, #1
 8003840:	429d      	cmp	r5, r3
 8003842:	bf38      	it	cc
 8003844:	461d      	movcc	r5, r3
 8003846:	0553      	lsls	r3, r2, #21
 8003848:	d527      	bpl.n	800389a <__ssputs_r+0x8e>
 800384a:	4629      	mov	r1, r5
 800384c:	f7ff ff52 	bl	80036f4 <_malloc_r>
 8003850:	4606      	mov	r6, r0
 8003852:	b360      	cbz	r0, 80038ae <__ssputs_r+0xa2>
 8003854:	464a      	mov	r2, r9
 8003856:	6921      	ldr	r1, [r4, #16]
 8003858:	f000 fafa 	bl	8003e50 <memcpy>
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003866:	81a3      	strh	r3, [r4, #12]
 8003868:	6126      	str	r6, [r4, #16]
 800386a:	444e      	add	r6, r9
 800386c:	6026      	str	r6, [r4, #0]
 800386e:	463e      	mov	r6, r7
 8003870:	6165      	str	r5, [r4, #20]
 8003872:	eba5 0509 	sub.w	r5, r5, r9
 8003876:	60a5      	str	r5, [r4, #8]
 8003878:	42be      	cmp	r6, r7
 800387a:	d900      	bls.n	800387e <__ssputs_r+0x72>
 800387c:	463e      	mov	r6, r7
 800387e:	4632      	mov	r2, r6
 8003880:	4641      	mov	r1, r8
 8003882:	6820      	ldr	r0, [r4, #0]
 8003884:	f000 faac 	bl	8003de0 <memmove>
 8003888:	2000      	movs	r0, #0
 800388a:	68a3      	ldr	r3, [r4, #8]
 800388c:	1b9b      	subs	r3, r3, r6
 800388e:	60a3      	str	r3, [r4, #8]
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	4433      	add	r3, r6
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800389a:	462a      	mov	r2, r5
 800389c:	f000 fae6 	bl	8003e6c <_realloc_r>
 80038a0:	4606      	mov	r6, r0
 80038a2:	2800      	cmp	r0, #0
 80038a4:	d1e0      	bne.n	8003868 <__ssputs_r+0x5c>
 80038a6:	4650      	mov	r0, sl
 80038a8:	6921      	ldr	r1, [r4, #16]
 80038aa:	f7ff feb9 	bl	8003620 <_free_r>
 80038ae:	230c      	movs	r3, #12
 80038b0:	f8ca 3000 	str.w	r3, [sl]
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	f04f 30ff 	mov.w	r0, #4294967295
 80038ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038be:	81a3      	strh	r3, [r4, #12]
 80038c0:	e7e9      	b.n	8003896 <__ssputs_r+0x8a>
	...

080038c4 <_svfiprintf_r>:
 80038c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c8:	4698      	mov	r8, r3
 80038ca:	898b      	ldrh	r3, [r1, #12]
 80038cc:	4607      	mov	r7, r0
 80038ce:	061b      	lsls	r3, r3, #24
 80038d0:	460d      	mov	r5, r1
 80038d2:	4614      	mov	r4, r2
 80038d4:	b09d      	sub	sp, #116	@ 0x74
 80038d6:	d510      	bpl.n	80038fa <_svfiprintf_r+0x36>
 80038d8:	690b      	ldr	r3, [r1, #16]
 80038da:	b973      	cbnz	r3, 80038fa <_svfiprintf_r+0x36>
 80038dc:	2140      	movs	r1, #64	@ 0x40
 80038de:	f7ff ff09 	bl	80036f4 <_malloc_r>
 80038e2:	6028      	str	r0, [r5, #0]
 80038e4:	6128      	str	r0, [r5, #16]
 80038e6:	b930      	cbnz	r0, 80038f6 <_svfiprintf_r+0x32>
 80038e8:	230c      	movs	r3, #12
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	b01d      	add	sp, #116	@ 0x74
 80038f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038f6:	2340      	movs	r3, #64	@ 0x40
 80038f8:	616b      	str	r3, [r5, #20]
 80038fa:	2300      	movs	r3, #0
 80038fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80038fe:	2320      	movs	r3, #32
 8003900:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003904:	2330      	movs	r3, #48	@ 0x30
 8003906:	f04f 0901 	mov.w	r9, #1
 800390a:	f8cd 800c 	str.w	r8, [sp, #12]
 800390e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003aa8 <_svfiprintf_r+0x1e4>
 8003912:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003916:	4623      	mov	r3, r4
 8003918:	469a      	mov	sl, r3
 800391a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800391e:	b10a      	cbz	r2, 8003924 <_svfiprintf_r+0x60>
 8003920:	2a25      	cmp	r2, #37	@ 0x25
 8003922:	d1f9      	bne.n	8003918 <_svfiprintf_r+0x54>
 8003924:	ebba 0b04 	subs.w	fp, sl, r4
 8003928:	d00b      	beq.n	8003942 <_svfiprintf_r+0x7e>
 800392a:	465b      	mov	r3, fp
 800392c:	4622      	mov	r2, r4
 800392e:	4629      	mov	r1, r5
 8003930:	4638      	mov	r0, r7
 8003932:	f7ff ff6b 	bl	800380c <__ssputs_r>
 8003936:	3001      	adds	r0, #1
 8003938:	f000 80a7 	beq.w	8003a8a <_svfiprintf_r+0x1c6>
 800393c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800393e:	445a      	add	r2, fp
 8003940:	9209      	str	r2, [sp, #36]	@ 0x24
 8003942:	f89a 3000 	ldrb.w	r3, [sl]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 809f 	beq.w	8003a8a <_svfiprintf_r+0x1c6>
 800394c:	2300      	movs	r3, #0
 800394e:	f04f 32ff 	mov.w	r2, #4294967295
 8003952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003956:	f10a 0a01 	add.w	sl, sl, #1
 800395a:	9304      	str	r3, [sp, #16]
 800395c:	9307      	str	r3, [sp, #28]
 800395e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003962:	931a      	str	r3, [sp, #104]	@ 0x68
 8003964:	4654      	mov	r4, sl
 8003966:	2205      	movs	r2, #5
 8003968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800396c:	484e      	ldr	r0, [pc, #312]	@ (8003aa8 <_svfiprintf_r+0x1e4>)
 800396e:	f000 fa61 	bl	8003e34 <memchr>
 8003972:	9a04      	ldr	r2, [sp, #16]
 8003974:	b9d8      	cbnz	r0, 80039ae <_svfiprintf_r+0xea>
 8003976:	06d0      	lsls	r0, r2, #27
 8003978:	bf44      	itt	mi
 800397a:	2320      	movmi	r3, #32
 800397c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003980:	0711      	lsls	r1, r2, #28
 8003982:	bf44      	itt	mi
 8003984:	232b      	movmi	r3, #43	@ 0x2b
 8003986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800398a:	f89a 3000 	ldrb.w	r3, [sl]
 800398e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003990:	d015      	beq.n	80039be <_svfiprintf_r+0xfa>
 8003992:	4654      	mov	r4, sl
 8003994:	2000      	movs	r0, #0
 8003996:	f04f 0c0a 	mov.w	ip, #10
 800399a:	9a07      	ldr	r2, [sp, #28]
 800399c:	4621      	mov	r1, r4
 800399e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039a2:	3b30      	subs	r3, #48	@ 0x30
 80039a4:	2b09      	cmp	r3, #9
 80039a6:	d94b      	bls.n	8003a40 <_svfiprintf_r+0x17c>
 80039a8:	b1b0      	cbz	r0, 80039d8 <_svfiprintf_r+0x114>
 80039aa:	9207      	str	r2, [sp, #28]
 80039ac:	e014      	b.n	80039d8 <_svfiprintf_r+0x114>
 80039ae:	eba0 0308 	sub.w	r3, r0, r8
 80039b2:	fa09 f303 	lsl.w	r3, r9, r3
 80039b6:	4313      	orrs	r3, r2
 80039b8:	46a2      	mov	sl, r4
 80039ba:	9304      	str	r3, [sp, #16]
 80039bc:	e7d2      	b.n	8003964 <_svfiprintf_r+0xa0>
 80039be:	9b03      	ldr	r3, [sp, #12]
 80039c0:	1d19      	adds	r1, r3, #4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	9103      	str	r1, [sp, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bfbb      	ittet	lt
 80039ca:	425b      	neglt	r3, r3
 80039cc:	f042 0202 	orrlt.w	r2, r2, #2
 80039d0:	9307      	strge	r3, [sp, #28]
 80039d2:	9307      	strlt	r3, [sp, #28]
 80039d4:	bfb8      	it	lt
 80039d6:	9204      	strlt	r2, [sp, #16]
 80039d8:	7823      	ldrb	r3, [r4, #0]
 80039da:	2b2e      	cmp	r3, #46	@ 0x2e
 80039dc:	d10a      	bne.n	80039f4 <_svfiprintf_r+0x130>
 80039de:	7863      	ldrb	r3, [r4, #1]
 80039e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80039e2:	d132      	bne.n	8003a4a <_svfiprintf_r+0x186>
 80039e4:	9b03      	ldr	r3, [sp, #12]
 80039e6:	3402      	adds	r4, #2
 80039e8:	1d1a      	adds	r2, r3, #4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	9203      	str	r2, [sp, #12]
 80039ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80039f2:	9305      	str	r3, [sp, #20]
 80039f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003aac <_svfiprintf_r+0x1e8>
 80039f8:	2203      	movs	r2, #3
 80039fa:	4650      	mov	r0, sl
 80039fc:	7821      	ldrb	r1, [r4, #0]
 80039fe:	f000 fa19 	bl	8003e34 <memchr>
 8003a02:	b138      	cbz	r0, 8003a14 <_svfiprintf_r+0x150>
 8003a04:	2240      	movs	r2, #64	@ 0x40
 8003a06:	9b04      	ldr	r3, [sp, #16]
 8003a08:	eba0 000a 	sub.w	r0, r0, sl
 8003a0c:	4082      	lsls	r2, r0
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	3401      	adds	r4, #1
 8003a12:	9304      	str	r3, [sp, #16]
 8003a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a18:	2206      	movs	r2, #6
 8003a1a:	4825      	ldr	r0, [pc, #148]	@ (8003ab0 <_svfiprintf_r+0x1ec>)
 8003a1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a20:	f000 fa08 	bl	8003e34 <memchr>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d036      	beq.n	8003a96 <_svfiprintf_r+0x1d2>
 8003a28:	4b22      	ldr	r3, [pc, #136]	@ (8003ab4 <_svfiprintf_r+0x1f0>)
 8003a2a:	bb1b      	cbnz	r3, 8003a74 <_svfiprintf_r+0x1b0>
 8003a2c:	9b03      	ldr	r3, [sp, #12]
 8003a2e:	3307      	adds	r3, #7
 8003a30:	f023 0307 	bic.w	r3, r3, #7
 8003a34:	3308      	adds	r3, #8
 8003a36:	9303      	str	r3, [sp, #12]
 8003a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a3a:	4433      	add	r3, r6
 8003a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a3e:	e76a      	b.n	8003916 <_svfiprintf_r+0x52>
 8003a40:	460c      	mov	r4, r1
 8003a42:	2001      	movs	r0, #1
 8003a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a48:	e7a8      	b.n	800399c <_svfiprintf_r+0xd8>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f04f 0c0a 	mov.w	ip, #10
 8003a50:	4619      	mov	r1, r3
 8003a52:	3401      	adds	r4, #1
 8003a54:	9305      	str	r3, [sp, #20]
 8003a56:	4620      	mov	r0, r4
 8003a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a5c:	3a30      	subs	r2, #48	@ 0x30
 8003a5e:	2a09      	cmp	r2, #9
 8003a60:	d903      	bls.n	8003a6a <_svfiprintf_r+0x1a6>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0c6      	beq.n	80039f4 <_svfiprintf_r+0x130>
 8003a66:	9105      	str	r1, [sp, #20]
 8003a68:	e7c4      	b.n	80039f4 <_svfiprintf_r+0x130>
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a72:	e7f0      	b.n	8003a56 <_svfiprintf_r+0x192>
 8003a74:	ab03      	add	r3, sp, #12
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	462a      	mov	r2, r5
 8003a7a:	4638      	mov	r0, r7
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab8 <_svfiprintf_r+0x1f4>)
 8003a7e:	a904      	add	r1, sp, #16
 8003a80:	f3af 8000 	nop.w
 8003a84:	1c42      	adds	r2, r0, #1
 8003a86:	4606      	mov	r6, r0
 8003a88:	d1d6      	bne.n	8003a38 <_svfiprintf_r+0x174>
 8003a8a:	89ab      	ldrh	r3, [r5, #12]
 8003a8c:	065b      	lsls	r3, r3, #25
 8003a8e:	f53f af2d 	bmi.w	80038ec <_svfiprintf_r+0x28>
 8003a92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a94:	e72c      	b.n	80038f0 <_svfiprintf_r+0x2c>
 8003a96:	ab03      	add	r3, sp, #12
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	462a      	mov	r2, r5
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <_svfiprintf_r+0x1f4>)
 8003aa0:	a904      	add	r1, sp, #16
 8003aa2:	f000 f87d 	bl	8003ba0 <_printf_i>
 8003aa6:	e7ed      	b.n	8003a84 <_svfiprintf_r+0x1c0>
 8003aa8:	08003f4a 	.word	0x08003f4a
 8003aac:	08003f50 	.word	0x08003f50
 8003ab0:	08003f54 	.word	0x08003f54
 8003ab4:	00000000 	.word	0x00000000
 8003ab8:	0800380d 	.word	0x0800380d

08003abc <_printf_common>:
 8003abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac0:	4616      	mov	r6, r2
 8003ac2:	4698      	mov	r8, r3
 8003ac4:	688a      	ldr	r2, [r1, #8]
 8003ac6:	690b      	ldr	r3, [r1, #16]
 8003ac8:	4607      	mov	r7, r0
 8003aca:	4293      	cmp	r3, r2
 8003acc:	bfb8      	it	lt
 8003ace:	4613      	movlt	r3, r2
 8003ad0:	6033      	str	r3, [r6, #0]
 8003ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003adc:	b10a      	cbz	r2, 8003ae2 <_printf_common+0x26>
 8003ade:	3301      	adds	r3, #1
 8003ae0:	6033      	str	r3, [r6, #0]
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	0699      	lsls	r1, r3, #26
 8003ae6:	bf42      	ittt	mi
 8003ae8:	6833      	ldrmi	r3, [r6, #0]
 8003aea:	3302      	addmi	r3, #2
 8003aec:	6033      	strmi	r3, [r6, #0]
 8003aee:	6825      	ldr	r5, [r4, #0]
 8003af0:	f015 0506 	ands.w	r5, r5, #6
 8003af4:	d106      	bne.n	8003b04 <_printf_common+0x48>
 8003af6:	f104 0a19 	add.w	sl, r4, #25
 8003afa:	68e3      	ldr	r3, [r4, #12]
 8003afc:	6832      	ldr	r2, [r6, #0]
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	42ab      	cmp	r3, r5
 8003b02:	dc2b      	bgt.n	8003b5c <_printf_common+0xa0>
 8003b04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b08:	6822      	ldr	r2, [r4, #0]
 8003b0a:	3b00      	subs	r3, #0
 8003b0c:	bf18      	it	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	0692      	lsls	r2, r2, #26
 8003b12:	d430      	bmi.n	8003b76 <_printf_common+0xba>
 8003b14:	4641      	mov	r1, r8
 8003b16:	4638      	mov	r0, r7
 8003b18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b1c:	47c8      	blx	r9
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d023      	beq.n	8003b6a <_printf_common+0xae>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	6922      	ldr	r2, [r4, #16]
 8003b26:	f003 0306 	and.w	r3, r3, #6
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	bf14      	ite	ne
 8003b2e:	2500      	movne	r5, #0
 8003b30:	6833      	ldreq	r3, [r6, #0]
 8003b32:	f04f 0600 	mov.w	r6, #0
 8003b36:	bf08      	it	eq
 8003b38:	68e5      	ldreq	r5, [r4, #12]
 8003b3a:	f104 041a 	add.w	r4, r4, #26
 8003b3e:	bf08      	it	eq
 8003b40:	1aed      	subeq	r5, r5, r3
 8003b42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b46:	bf08      	it	eq
 8003b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bfc4      	itt	gt
 8003b50:	1a9b      	subgt	r3, r3, r2
 8003b52:	18ed      	addgt	r5, r5, r3
 8003b54:	42b5      	cmp	r5, r6
 8003b56:	d11a      	bne.n	8003b8e <_printf_common+0xd2>
 8003b58:	2000      	movs	r0, #0
 8003b5a:	e008      	b.n	8003b6e <_printf_common+0xb2>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	4652      	mov	r2, sl
 8003b60:	4641      	mov	r1, r8
 8003b62:	4638      	mov	r0, r7
 8003b64:	47c8      	blx	r9
 8003b66:	3001      	adds	r0, #1
 8003b68:	d103      	bne.n	8003b72 <_printf_common+0xb6>
 8003b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b72:	3501      	adds	r5, #1
 8003b74:	e7c1      	b.n	8003afa <_printf_common+0x3e>
 8003b76:	2030      	movs	r0, #48	@ 0x30
 8003b78:	18e1      	adds	r1, r4, r3
 8003b7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b84:	4422      	add	r2, r4
 8003b86:	3302      	adds	r3, #2
 8003b88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b8c:	e7c2      	b.n	8003b14 <_printf_common+0x58>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4622      	mov	r2, r4
 8003b92:	4641      	mov	r1, r8
 8003b94:	4638      	mov	r0, r7
 8003b96:	47c8      	blx	r9
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d0e6      	beq.n	8003b6a <_printf_common+0xae>
 8003b9c:	3601      	adds	r6, #1
 8003b9e:	e7d9      	b.n	8003b54 <_printf_common+0x98>

08003ba0 <_printf_i>:
 8003ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba4:	7e0f      	ldrb	r7, [r1, #24]
 8003ba6:	4691      	mov	r9, r2
 8003ba8:	2f78      	cmp	r7, #120	@ 0x78
 8003baa:	4680      	mov	r8, r0
 8003bac:	460c      	mov	r4, r1
 8003bae:	469a      	mov	sl, r3
 8003bb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bb6:	d807      	bhi.n	8003bc8 <_printf_i+0x28>
 8003bb8:	2f62      	cmp	r7, #98	@ 0x62
 8003bba:	d80a      	bhi.n	8003bd2 <_printf_i+0x32>
 8003bbc:	2f00      	cmp	r7, #0
 8003bbe:	f000 80d3 	beq.w	8003d68 <_printf_i+0x1c8>
 8003bc2:	2f58      	cmp	r7, #88	@ 0x58
 8003bc4:	f000 80ba 	beq.w	8003d3c <_printf_i+0x19c>
 8003bc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bd0:	e03a      	b.n	8003c48 <_printf_i+0xa8>
 8003bd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bd6:	2b15      	cmp	r3, #21
 8003bd8:	d8f6      	bhi.n	8003bc8 <_printf_i+0x28>
 8003bda:	a101      	add	r1, pc, #4	@ (adr r1, 8003be0 <_printf_i+0x40>)
 8003bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003be0:	08003c39 	.word	0x08003c39
 8003be4:	08003c4d 	.word	0x08003c4d
 8003be8:	08003bc9 	.word	0x08003bc9
 8003bec:	08003bc9 	.word	0x08003bc9
 8003bf0:	08003bc9 	.word	0x08003bc9
 8003bf4:	08003bc9 	.word	0x08003bc9
 8003bf8:	08003c4d 	.word	0x08003c4d
 8003bfc:	08003bc9 	.word	0x08003bc9
 8003c00:	08003bc9 	.word	0x08003bc9
 8003c04:	08003bc9 	.word	0x08003bc9
 8003c08:	08003bc9 	.word	0x08003bc9
 8003c0c:	08003d4f 	.word	0x08003d4f
 8003c10:	08003c77 	.word	0x08003c77
 8003c14:	08003d09 	.word	0x08003d09
 8003c18:	08003bc9 	.word	0x08003bc9
 8003c1c:	08003bc9 	.word	0x08003bc9
 8003c20:	08003d71 	.word	0x08003d71
 8003c24:	08003bc9 	.word	0x08003bc9
 8003c28:	08003c77 	.word	0x08003c77
 8003c2c:	08003bc9 	.word	0x08003bc9
 8003c30:	08003bc9 	.word	0x08003bc9
 8003c34:	08003d11 	.word	0x08003d11
 8003c38:	6833      	ldr	r3, [r6, #0]
 8003c3a:	1d1a      	adds	r2, r3, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6032      	str	r2, [r6, #0]
 8003c40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e09e      	b.n	8003d8a <_printf_i+0x1ea>
 8003c4c:	6833      	ldr	r3, [r6, #0]
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	1d19      	adds	r1, r3, #4
 8003c52:	6031      	str	r1, [r6, #0]
 8003c54:	0606      	lsls	r6, r0, #24
 8003c56:	d501      	bpl.n	8003c5c <_printf_i+0xbc>
 8003c58:	681d      	ldr	r5, [r3, #0]
 8003c5a:	e003      	b.n	8003c64 <_printf_i+0xc4>
 8003c5c:	0645      	lsls	r5, r0, #25
 8003c5e:	d5fb      	bpl.n	8003c58 <_printf_i+0xb8>
 8003c60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c64:	2d00      	cmp	r5, #0
 8003c66:	da03      	bge.n	8003c70 <_printf_i+0xd0>
 8003c68:	232d      	movs	r3, #45	@ 0x2d
 8003c6a:	426d      	negs	r5, r5
 8003c6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c70:	230a      	movs	r3, #10
 8003c72:	4859      	ldr	r0, [pc, #356]	@ (8003dd8 <_printf_i+0x238>)
 8003c74:	e011      	b.n	8003c9a <_printf_i+0xfa>
 8003c76:	6821      	ldr	r1, [r4, #0]
 8003c78:	6833      	ldr	r3, [r6, #0]
 8003c7a:	0608      	lsls	r0, r1, #24
 8003c7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c80:	d402      	bmi.n	8003c88 <_printf_i+0xe8>
 8003c82:	0649      	lsls	r1, r1, #25
 8003c84:	bf48      	it	mi
 8003c86:	b2ad      	uxthmi	r5, r5
 8003c88:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c8a:	6033      	str	r3, [r6, #0]
 8003c8c:	bf14      	ite	ne
 8003c8e:	230a      	movne	r3, #10
 8003c90:	2308      	moveq	r3, #8
 8003c92:	4851      	ldr	r0, [pc, #324]	@ (8003dd8 <_printf_i+0x238>)
 8003c94:	2100      	movs	r1, #0
 8003c96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c9a:	6866      	ldr	r6, [r4, #4]
 8003c9c:	2e00      	cmp	r6, #0
 8003c9e:	bfa8      	it	ge
 8003ca0:	6821      	ldrge	r1, [r4, #0]
 8003ca2:	60a6      	str	r6, [r4, #8]
 8003ca4:	bfa4      	itt	ge
 8003ca6:	f021 0104 	bicge.w	r1, r1, #4
 8003caa:	6021      	strge	r1, [r4, #0]
 8003cac:	b90d      	cbnz	r5, 8003cb2 <_printf_i+0x112>
 8003cae:	2e00      	cmp	r6, #0
 8003cb0:	d04b      	beq.n	8003d4a <_printf_i+0x1aa>
 8003cb2:	4616      	mov	r6, r2
 8003cb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cb8:	fb03 5711 	mls	r7, r3, r1, r5
 8003cbc:	5dc7      	ldrb	r7, [r0, r7]
 8003cbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cc2:	462f      	mov	r7, r5
 8003cc4:	42bb      	cmp	r3, r7
 8003cc6:	460d      	mov	r5, r1
 8003cc8:	d9f4      	bls.n	8003cb4 <_printf_i+0x114>
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d10b      	bne.n	8003ce6 <_printf_i+0x146>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	07df      	lsls	r7, r3, #31
 8003cd2:	d508      	bpl.n	8003ce6 <_printf_i+0x146>
 8003cd4:	6923      	ldr	r3, [r4, #16]
 8003cd6:	6861      	ldr	r1, [r4, #4]
 8003cd8:	4299      	cmp	r1, r3
 8003cda:	bfde      	ittt	le
 8003cdc:	2330      	movle	r3, #48	@ 0x30
 8003cde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ce2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ce6:	1b92      	subs	r2, r2, r6
 8003ce8:	6122      	str	r2, [r4, #16]
 8003cea:	464b      	mov	r3, r9
 8003cec:	4621      	mov	r1, r4
 8003cee:	4640      	mov	r0, r8
 8003cf0:	f8cd a000 	str.w	sl, [sp]
 8003cf4:	aa03      	add	r2, sp, #12
 8003cf6:	f7ff fee1 	bl	8003abc <_printf_common>
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d14a      	bne.n	8003d94 <_printf_i+0x1f4>
 8003cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003d02:	b004      	add	sp, #16
 8003d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	f043 0320 	orr.w	r3, r3, #32
 8003d0e:	6023      	str	r3, [r4, #0]
 8003d10:	2778      	movs	r7, #120	@ 0x78
 8003d12:	4832      	ldr	r0, [pc, #200]	@ (8003ddc <_printf_i+0x23c>)
 8003d14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	6831      	ldr	r1, [r6, #0]
 8003d1c:	061f      	lsls	r7, r3, #24
 8003d1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d22:	d402      	bmi.n	8003d2a <_printf_i+0x18a>
 8003d24:	065f      	lsls	r7, r3, #25
 8003d26:	bf48      	it	mi
 8003d28:	b2ad      	uxthmi	r5, r5
 8003d2a:	6031      	str	r1, [r6, #0]
 8003d2c:	07d9      	lsls	r1, r3, #31
 8003d2e:	bf44      	itt	mi
 8003d30:	f043 0320 	orrmi.w	r3, r3, #32
 8003d34:	6023      	strmi	r3, [r4, #0]
 8003d36:	b11d      	cbz	r5, 8003d40 <_printf_i+0x1a0>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	e7ab      	b.n	8003c94 <_printf_i+0xf4>
 8003d3c:	4826      	ldr	r0, [pc, #152]	@ (8003dd8 <_printf_i+0x238>)
 8003d3e:	e7e9      	b.n	8003d14 <_printf_i+0x174>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	f023 0320 	bic.w	r3, r3, #32
 8003d46:	6023      	str	r3, [r4, #0]
 8003d48:	e7f6      	b.n	8003d38 <_printf_i+0x198>
 8003d4a:	4616      	mov	r6, r2
 8003d4c:	e7bd      	b.n	8003cca <_printf_i+0x12a>
 8003d4e:	6833      	ldr	r3, [r6, #0]
 8003d50:	6825      	ldr	r5, [r4, #0]
 8003d52:	1d18      	adds	r0, r3, #4
 8003d54:	6961      	ldr	r1, [r4, #20]
 8003d56:	6030      	str	r0, [r6, #0]
 8003d58:	062e      	lsls	r6, r5, #24
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	d501      	bpl.n	8003d62 <_printf_i+0x1c2>
 8003d5e:	6019      	str	r1, [r3, #0]
 8003d60:	e002      	b.n	8003d68 <_printf_i+0x1c8>
 8003d62:	0668      	lsls	r0, r5, #25
 8003d64:	d5fb      	bpl.n	8003d5e <_printf_i+0x1be>
 8003d66:	8019      	strh	r1, [r3, #0]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	4616      	mov	r6, r2
 8003d6c:	6123      	str	r3, [r4, #16]
 8003d6e:	e7bc      	b.n	8003cea <_printf_i+0x14a>
 8003d70:	6833      	ldr	r3, [r6, #0]
 8003d72:	2100      	movs	r1, #0
 8003d74:	1d1a      	adds	r2, r3, #4
 8003d76:	6032      	str	r2, [r6, #0]
 8003d78:	681e      	ldr	r6, [r3, #0]
 8003d7a:	6862      	ldr	r2, [r4, #4]
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f000 f859 	bl	8003e34 <memchr>
 8003d82:	b108      	cbz	r0, 8003d88 <_printf_i+0x1e8>
 8003d84:	1b80      	subs	r0, r0, r6
 8003d86:	6060      	str	r0, [r4, #4]
 8003d88:	6863      	ldr	r3, [r4, #4]
 8003d8a:	6123      	str	r3, [r4, #16]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d92:	e7aa      	b.n	8003cea <_printf_i+0x14a>
 8003d94:	4632      	mov	r2, r6
 8003d96:	4649      	mov	r1, r9
 8003d98:	4640      	mov	r0, r8
 8003d9a:	6923      	ldr	r3, [r4, #16]
 8003d9c:	47d0      	blx	sl
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d0ad      	beq.n	8003cfe <_printf_i+0x15e>
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	079b      	lsls	r3, r3, #30
 8003da6:	d413      	bmi.n	8003dd0 <_printf_i+0x230>
 8003da8:	68e0      	ldr	r0, [r4, #12]
 8003daa:	9b03      	ldr	r3, [sp, #12]
 8003dac:	4298      	cmp	r0, r3
 8003dae:	bfb8      	it	lt
 8003db0:	4618      	movlt	r0, r3
 8003db2:	e7a6      	b.n	8003d02 <_printf_i+0x162>
 8003db4:	2301      	movs	r3, #1
 8003db6:	4632      	mov	r2, r6
 8003db8:	4649      	mov	r1, r9
 8003dba:	4640      	mov	r0, r8
 8003dbc:	47d0      	blx	sl
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d09d      	beq.n	8003cfe <_printf_i+0x15e>
 8003dc2:	3501      	adds	r5, #1
 8003dc4:	68e3      	ldr	r3, [r4, #12]
 8003dc6:	9903      	ldr	r1, [sp, #12]
 8003dc8:	1a5b      	subs	r3, r3, r1
 8003dca:	42ab      	cmp	r3, r5
 8003dcc:	dcf2      	bgt.n	8003db4 <_printf_i+0x214>
 8003dce:	e7eb      	b.n	8003da8 <_printf_i+0x208>
 8003dd0:	2500      	movs	r5, #0
 8003dd2:	f104 0619 	add.w	r6, r4, #25
 8003dd6:	e7f5      	b.n	8003dc4 <_printf_i+0x224>
 8003dd8:	08003f5b 	.word	0x08003f5b
 8003ddc:	08003f6c 	.word	0x08003f6c

08003de0 <memmove>:
 8003de0:	4288      	cmp	r0, r1
 8003de2:	b510      	push	{r4, lr}
 8003de4:	eb01 0402 	add.w	r4, r1, r2
 8003de8:	d902      	bls.n	8003df0 <memmove+0x10>
 8003dea:	4284      	cmp	r4, r0
 8003dec:	4623      	mov	r3, r4
 8003dee:	d807      	bhi.n	8003e00 <memmove+0x20>
 8003df0:	1e43      	subs	r3, r0, #1
 8003df2:	42a1      	cmp	r1, r4
 8003df4:	d008      	beq.n	8003e08 <memmove+0x28>
 8003df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dfe:	e7f8      	b.n	8003df2 <memmove+0x12>
 8003e00:	4601      	mov	r1, r0
 8003e02:	4402      	add	r2, r0
 8003e04:	428a      	cmp	r2, r1
 8003e06:	d100      	bne.n	8003e0a <memmove+0x2a>
 8003e08:	bd10      	pop	{r4, pc}
 8003e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e12:	e7f7      	b.n	8003e04 <memmove+0x24>

08003e14 <_sbrk_r>:
 8003e14:	b538      	push	{r3, r4, r5, lr}
 8003e16:	2300      	movs	r3, #0
 8003e18:	4d05      	ldr	r5, [pc, #20]	@ (8003e30 <_sbrk_r+0x1c>)
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	602b      	str	r3, [r5, #0]
 8003e20:	f7fc fe8a 	bl	8000b38 <_sbrk>
 8003e24:	1c43      	adds	r3, r0, #1
 8003e26:	d102      	bne.n	8003e2e <_sbrk_r+0x1a>
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	b103      	cbz	r3, 8003e2e <_sbrk_r+0x1a>
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}
 8003e30:	20000278 	.word	0x20000278

08003e34 <memchr>:
 8003e34:	4603      	mov	r3, r0
 8003e36:	b510      	push	{r4, lr}
 8003e38:	b2c9      	uxtb	r1, r1
 8003e3a:	4402      	add	r2, r0
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	d101      	bne.n	8003e46 <memchr+0x12>
 8003e42:	2000      	movs	r0, #0
 8003e44:	e003      	b.n	8003e4e <memchr+0x1a>
 8003e46:	7804      	ldrb	r4, [r0, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	428c      	cmp	r4, r1
 8003e4c:	d1f6      	bne.n	8003e3c <memchr+0x8>
 8003e4e:	bd10      	pop	{r4, pc}

08003e50 <memcpy>:
 8003e50:	440a      	add	r2, r1
 8003e52:	4291      	cmp	r1, r2
 8003e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e58:	d100      	bne.n	8003e5c <memcpy+0xc>
 8003e5a:	4770      	bx	lr
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e62:	4291      	cmp	r1, r2
 8003e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e68:	d1f9      	bne.n	8003e5e <memcpy+0xe>
 8003e6a:	bd10      	pop	{r4, pc}

08003e6c <_realloc_r>:
 8003e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e70:	4680      	mov	r8, r0
 8003e72:	4615      	mov	r5, r2
 8003e74:	460c      	mov	r4, r1
 8003e76:	b921      	cbnz	r1, 8003e82 <_realloc_r+0x16>
 8003e78:	4611      	mov	r1, r2
 8003e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7e:	f7ff bc39 	b.w	80036f4 <_malloc_r>
 8003e82:	b92a      	cbnz	r2, 8003e90 <_realloc_r+0x24>
 8003e84:	f7ff fbcc 	bl	8003620 <_free_r>
 8003e88:	2400      	movs	r4, #0
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e90:	f000 f81a 	bl	8003ec8 <_malloc_usable_size_r>
 8003e94:	4285      	cmp	r5, r0
 8003e96:	4606      	mov	r6, r0
 8003e98:	d802      	bhi.n	8003ea0 <_realloc_r+0x34>
 8003e9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003e9e:	d8f4      	bhi.n	8003e8a <_realloc_r+0x1e>
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	f7ff fc26 	bl	80036f4 <_malloc_r>
 8003ea8:	4607      	mov	r7, r0
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d0ec      	beq.n	8003e88 <_realloc_r+0x1c>
 8003eae:	42b5      	cmp	r5, r6
 8003eb0:	462a      	mov	r2, r5
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	bf28      	it	cs
 8003eb6:	4632      	movcs	r2, r6
 8003eb8:	f7ff ffca 	bl	8003e50 <memcpy>
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	4640      	mov	r0, r8
 8003ec0:	f7ff fbae 	bl	8003620 <_free_r>
 8003ec4:	463c      	mov	r4, r7
 8003ec6:	e7e0      	b.n	8003e8a <_realloc_r+0x1e>

08003ec8 <_malloc_usable_size_r>:
 8003ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ecc:	1f18      	subs	r0, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bfbc      	itt	lt
 8003ed2:	580b      	ldrlt	r3, [r1, r0]
 8003ed4:	18c0      	addlt	r0, r0, r3
 8003ed6:	4770      	bx	lr

08003ed8 <_init>:
 8003ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eda:	bf00      	nop
 8003edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ede:	bc08      	pop	{r3}
 8003ee0:	469e      	mov	lr, r3
 8003ee2:	4770      	bx	lr

08003ee4 <_fini>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	bf00      	nop
 8003ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eea:	bc08      	pop	{r3}
 8003eec:	469e      	mov	lr, r3
 8003eee:	4770      	bx	lr
